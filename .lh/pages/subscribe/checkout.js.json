{
    "sourceFile": "pages/subscribe/checkout.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736741923647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736741923647,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport Cookies from 'js-cookie';\r\nimport { Message } from 'primereact/message';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { useRouter } from 'next/router';\r\nimport axios from 'axios'; // Import Axios\r\n\r\nconst Checkout = () => {\r\n    const router = useRouter();\r\n    const { code } = router.query; // Mengambil nilai dari parameter 'code'\r\n    const [data, setData] = useState(null);  // Pastikan Anda memiliki baris ini\r\n    const [paymentData, setPaymentData] = useState({\r\n        id: \"\",\r\n        price: \"\",\r\n        name: \"\"\r\n    });\r\n    const getTokenFromCookie = () => {\r\n        const token = Cookies.get('token'); // <-- Replace 'yourCookieName' with the actual name of your cookie\r\n        return token;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (code) { // Memeriksa apakah ada kode yang diterima dari URL\r\n            const fetchData = async () => {\r\n                try {\r\n                    const token = getTokenFromCookie();\r\n                    const response = await axios.get(`http://192.168.14.248:8080/api/v1/package/${code}`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`\r\n                        }\r\n                    });\r\n                    if (response.status < 200 || response.status >= 300) {\r\n                        throw new Error(`HTTP error! Status: ${response.status}`);\r\n                    }\r\n\r\n                    setData(response.data.data);\r\n                } catch (error) {\r\n                    console.error('Error fetching data:', error);\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [code]);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setPaymentData({\r\n                id: data.id,\r\n                price: data.price,\r\n                name: data.name\r\n            });\r\n        }\r\n    }, [data]);\r\n\r\n    const initiatePayment = async () => {\r\n        try {\r\n            const token = getTokenFromCookie();\r\n\r\n            const response = await axios.post('http://192.168.14.248:8080/api/v1/payment', paymentData, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            if (response.data.status && response.data.code === 200) {\r\n                window.location.href = response.data.data.redirect_url;\r\n            } else {\r\n                console.error(\"Payment initiation failed:\", response.data.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error initiating payment:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            <div className=\"col-12 lg:col-8\">\r\n                <div className=\"card\">\r\n                    <h3>Contact Information</h3>\r\n                    <div className=\"flex align-items-center flex-wrap gap-2 mb-3\">\r\n                        <label htmlFor=\"username1\" className=\"col-fixed w-9rem\">\r\n                            Username\r\n                        </label>\r\n                        <InputText id=\"username1\" onChange={(e) => setUsername(e.target.value)} required className=\"p-invalid\" />\r\n                        <Message severity=\"error\" text=\"Username is required\" />\r\n                    </div>\r\n                    <div className=\"flex align-items-center flex-wrap gap-2\">\r\n                        <label htmlFor=\"email\" className=\"col-fixed w-9rem\">\r\n                            Email\r\n                        </label>\r\n                        <InputText id=\"email\"  onChange={(e) => setEmail(e.target.value)} required className=\"p-invalid\" />\r\n                        <Message severity=\"error\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-12 lg:col-4\">\r\n                <div className=\"card\">\r\n                    <h5>Help Text</h5>\r\n                    {data && (\r\n                        <div className=\"package-item\">\r\n                            {/* Tampilkan informasi paket di sini */}\r\n                            <p><strong>ID:</strong> {data.id}</p>\r\n                            <p><strong>Package:</strong> {data.name}</p>\r\n                            <p><strong>Code:</strong> {data.code}</p>\r\n                            <p><strong>Price:</strong> {data.price}</p>\r\n                            {/* ... tambahkan informasi lainnya sesuai kebutuhan */}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div>\r\n            <h1>Checkout Page</h1>\r\n            <button onClick={initiatePayment}>Bayar dengan Midtrans</button>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;"
        }
    ]
}