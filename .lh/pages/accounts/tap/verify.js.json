{
    "sourceFile": "pages/accounts/tap/verify.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736741923715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736741923715,
            "name": "Commit-0",
            "content": "import getConfig from 'next/config';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useContext, useState, useRef, useEffect } from 'react';\r\nimport AppConfig from '../../../layout/AppConfig';\r\nimport { Button } from 'primereact/button';\r\nimport { LayoutContext } from '../../../layout/context/layoutcontext';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { classNames } from 'primereact/utils';\r\nimport axios from 'axios';\r\nimport Link from 'next/link';\r\n\r\nconst VerifyPage = () => {\r\n    const { layoutConfig } = useContext(LayoutContext);\r\n    const router = useRouter();\r\n    const { token } = router.query; // Ambil token dari query parameter\r\n    const containerClassName = classNames('surface-ground flex align-items-center justify-content-center min-h-screen min-w-screen overflow-hidden', {'p-input-filled': layoutConfig.inputStyle === 'filled'});\r\n    const [notification, setNotification] = useState({\r\n        type: '', // 'success' or 'error'\r\n        message: ''\r\n    });\r\n\r\n    // OTP State\r\n    const [otp, setOtp] = useState(['', '', '', '']);\r\n    const otpRefs = useRef([]);\r\n\r\n    // Timer State\r\n    const [timer, setTimer] = useState(240); // 4 menit (240 detik)\r\n    const [canResend, setCanResend] = useState(false);\r\n\r\n    // Cek apakah semua input OTP sudah terisi\r\n    const isOtpComplete = otp.every(digit => digit !== '');\r\n\r\n    useEffect(() => {\r\n        if (!token) {\r\n            setNotification({ type: 'error', message: 'Missing token in URL.' });\r\n        }\r\n\r\n        // Timer countdown\r\n        const interval = setInterval(() => {\r\n            setTimer(prev => {\r\n                if (prev > 0) return prev - 1;\r\n                clearInterval(interval);\r\n                setCanResend(true);\r\n                return 0;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [token]);\r\n\r\n    const handleRegister = async () => {\r\n        const otpCode = otp.join(''); // Gabungkan digit OTP menjadi satu string\r\n    \r\n        if (!token) {\r\n            setNotification({ type: 'error', message: 'Missing token. Please try again.' });\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            const response = await axios.post(`http://192.168.14.248:2356/verify?token=${token}`, { otp: otpCode });\r\n    \r\n            // Cek jika respons berhasil\r\n            if (response.data.status && response.data.code === 200) {\r\n                // Gunakan pesan dari API\r\n                setNotification({ type: 'success', message: response.data.message }); \r\n                router.push('/accounts/tap/login'); // Redirect ke login jika berhasil\r\n            } else {\r\n                // Jika tidak sukses, tampilkan pesan error dari API\r\n                setNotification({ type: 'error', message: response.data.message || 'Verification failed.' });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error verifying OTP:', error);\r\n            setNotification({ type: 'error', message: 'An error occurred. Please try again later.' });\r\n        }\r\n    };\r\n    \r\n\r\n    const handleOtpChange = (index, value) => {\r\n        if (value.length > 1 || isNaN(value)) return; // Hanya satu digit angka\r\n\r\n        const newOtp = [...otp];\r\n        newOtp[index] = value;\r\n\r\n        if (value && index < otp.length - 1) {\r\n            otpRefs.current[index + 1].focus(); // Pindah fokus ke input berikutnya\r\n        } else if (!value && index > 0) {\r\n            otpRefs.current[index - 1].focus(); // Kembali ke input sebelumnya\r\n        }\r\n\r\n        setOtp(newOtp);\r\n    };\r\n\r\n    const handleResendCode = async () => {\r\n        // Reset state untuk resend code\r\n        setCanResend(false);\r\n        setTimer(240); // Mulai hitung mundur lagi\r\n\r\n        try {\r\n            // Kirim request PUT ke API\r\n            const response = await axios.put(`http://192.168.14.248:2356/resend-otp?token=${token}`);\r\n            if (response.data.success) {\r\n                setNotification({ type: 'success', message: 'OTP resent successfully.' });\r\n            } else {\r\n                setNotification({ type: 'error', message: 'Failed to resend OTP. Please try again.' });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error resending OTP:', error);\r\n            setNotification({ type: 'error', message: 'An error occurred while resending OTP. Please try again later.' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={containerClassName}>\r\n            <div className=\"flex flex-column align-items-center justify-content-center\">\r\n                <div style={{ borderRadius: '56px', padding: '0.3rem', background: 'linear-gradient(180deg, var(--primary-color) 10%, rgba(33, 150, 243, 0) 30%)' }}>\r\n                    <div className=\"w-full surface-card py-8 px-5 sm:px-8\" style={{ borderRadius: '53px' }}>\r\n                        <div className=\"text-center mb-5\">\r\n                            <div className=\"text-900 text-3xl font-medium mb-3\">Verify OTP</div>\r\n                            <span className=\"text-600 font-medium\">\r\n                                <div className={notification.type === 'error' ? 'alert alert-danger' : 'alert alert-success'}>\r\n                                    {notification.message}\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n\r\n                        {/* Hanya tampilkan input OTP dan tombol Verify jika timer belum habis */}\r\n                        {timer > 0 ? (\r\n                            <>\r\n                                <label htmlFor=\"otp\" className=\"block text-900 text-xl font-medium mb-2\">Enter OTP</label>\r\n                                <div className=\"flex justify-content-center mb-5\">\r\n                                    {otp.map((digit, index) => (\r\n                                        <InputText\r\n                                            key={index}\r\n                                            value={digit}\r\n                                            onChange={(e) => handleOtpChange(index, e.target.value)}\r\n                                            ref={el => otpRefs.current[index] = el}\r\n                                            className=\"mx-1 text-center\"\r\n                                            style={{ width: '60px', height: '60px', padding: '0.5rem', textAlign: 'center' }}\r\n                                            maxLength={1}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n\r\n                                <Button \r\n                                    label=\"Verify\" \r\n                                    className=\"w-full p-3 text-xl\" \r\n                                    onClick={handleRegister} \r\n                                    disabled={!isOtpComplete} // Tombol Verify dinonaktifkan jika OTP belum lengkap\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <p className=\"text-center text-red-600 mb-3\">OTP expired. Please resend the OTP.</p>\r\n                        )}\r\n\r\n                        {/* Resend OTP */}\r\n                        {canResend ? (\r\n                            <Button\r\n                                label=\"Resend Code\"\r\n                                className=\"w-full p-3 text-xl mt-3\"\r\n                                onClick={handleResendCode}\r\n                                disabled={!canResend || isOtpComplete} // Tombol Resend dinonaktifkan jika OTP belum lengkap atau timer belum habis\r\n                            />\r\n                        ) : (\r\n                            <p className=\"text-center mt-3\">Resend code in {`${Math.floor(timer / 60)}:${String(timer % 60).padStart(2, '0')}`} minutes</p>\r\n                        )}\r\n\r\n                        <Link href=\"/accounts/tap/login\">\r\n                            <div style={{ textAlign: 'center', marginTop: '2rem' }}>You have account ?  \r\n                                <a className=\"font-medium no-underline cursor-pointer\" style={{ color: 'var(--primary-color)' }}>\r\n                                    Login?\r\n                                </a>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nVerifyPage.getLayout = function getLayout(page) {\r\n    return (\r\n        <React.Fragment>\r\n            {page}\r\n            <AppConfig simple />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default VerifyPage;\r\n"
        }
    ]
}