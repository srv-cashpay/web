{
    "sourceFile": "pages/pages/merchant/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736741923683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736741923683,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst API_BASE_URL = 'http://192.168.14.248:2358/api/merchant';\r\n\r\nconst getTokenFromCookie = () => Cookies.get('token');\r\n\r\n// Fungsi untuk merefresh token\r\nconst refreshAuthToken = async () => {\r\n    const refreshToken = Cookies.get('refresh_token'); // Ambil refresh token dari cookie\r\n    if (!refreshToken) throw new Error('No refresh token available');\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            'http://192.168.14.248:2356/api/auth/refresh',\r\n            { refresh_token: refreshToken },\r\n            {\r\n                headers: {\r\n                    'x-api-key': '3f=Pr#g1@RU-nw=30', // Header tambahan jika diperlukan\r\n                },\r\n            }\r\n        );\r\n\r\n        if (response.data && response.data.data.access_token) {\r\n            const newToken = response.data.data.access_token;\r\n            Cookies.set('token', newToken); // Simpan token baru di cookie\r\n            return newToken; // Kembalikan token baru\r\n        } else {\r\n            throw new Error('Invalid response structure');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Buat instance axios dengan interceptor\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Interceptor untuk menyisipkan token pada setiap request\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        const token = getTokenFromCookie();\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor untuk menangani error pada respons\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.warn('Token expired. Attempting to refresh...');\r\n            try {\r\n                const newToken = await refreshAuthToken();\r\n                // Set ulang token ke header dari request yang gagal\r\n                error.config.headers.Authorization = `Bearer ${newToken}`;\r\n                // Ulangi request asli\r\n                return axiosInstance.request(error.config);\r\n            } catch (refreshError) {\r\n                console.error('Failed to refresh token:', refreshError);\r\n                window.location.href = '/login'; // Redirect ke login jika refresh token gagal\r\n                throw refreshError;\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Fetch merchant data\r\nexport const fetchMerchantData = async () => {\r\n    try {\r\n        const response = await axiosInstance.get('/get');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching merchant data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update merchant data\r\nexport const updateMerchantData = async (merchantData) => {\r\n    try {\r\n        const response = await axiosInstance.put(`/update?id=${merchantData.id}`, merchantData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating merchant data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Tambah user kasir\r\nexport const addCashier = async (cashierData) => {\r\n    try {\r\n        const response = await axiosInstance.post('/auth/signup', cashierData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error adding cashier:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Generate Authenticator QR Code\r\nexport const generateAuthenticatorCode = (merchantName) => {\r\n    const secret = Math.random().toString(36).substring(2, 15); // Random secret\r\n    return `otpauth://totp/${merchantName}?secret=${secret}&issuer=YourApp`;\r\n};\r\n"
        }
    ]
}