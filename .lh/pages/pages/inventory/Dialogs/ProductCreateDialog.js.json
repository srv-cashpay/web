{
    "sourceFile": "pages/pages/inventory/Dialogs/ProductCreateDialog.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736761940825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736761940824,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { classNames } from 'primereact/utils';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { Checkbox } from 'primereact/checkbox';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { fetchMerkData, fetchCategoryData } from '../../inventory/api';\r\n\r\nconst ProductCreateDialog = ({ visible, product, setProduct, hideDialog, saveProduct }) => {\r\n    const [isInfiniteStock, setIsInfiniteStock] = useState(false);\r\n    const [imagePreview, setImagePreview] = useState(null);\r\n    const [imageFile, setImageFile] = useState(null);\r\n    const [merkOptions, setMerkOptions] = useState([]);\r\n    const [categoryOptions, setCategoryOptions] = useState([]);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMerkOptions = async () => {\r\n            try {\r\n                const data = await fetchMerkData();\r\n                const merkNames = data.map(item => ({\r\n                    label: item.merk_name,\r\n                    value: item.id\r\n                }));\r\n                setMerkOptions(merkNames);\r\n            } catch (error) {\r\n                console.error('Error fetching merk options:', error);\r\n            }\r\n        };\r\n        fetchMerkOptions();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchCategoryOptions = async () => {\r\n            try {\r\n                const data = await fetchCategoryData();\r\n                const categoryNames = data.map(item => ({\r\n                    label: item.category_name,\r\n                    value: item.id\r\n                }));\r\n                setCategoryOptions(categoryNames);\r\n            } catch (error) {\r\n                console.error('Error fetching category options:', error);\r\n            }\r\n        };\r\n        fetchCategoryOptions();\r\n    }, []);\r\n\r\n    const formatCurrency = (value) => {\r\n        if (!value) return '';\r\n        return `Rp ${value.toLocaleString('id-ID')}`;\r\n    };\r\n\r\n    const onInputChange = (e, name) => {\r\n        let val = (e.target && e.target.value.trim()); // Trim spasi di awal/akhir\r\n        if (name === 'price') {\r\n            val = parseInt(val.replace(/[^0-9]/g, ''), 10) || 0;\r\n            if (val > 1000000000) val = 1000000000;\r\n        }\r\n        let _product = { ...product };\r\n    \r\n        // Set 'merk_id' and 'category_id' with the selected 'id' values\r\n        if (name === 'merk') {\r\n            _product.merk_id = val;\r\n        } else if (name === 'category') {\r\n            _product.category_id = val;\r\n        } else {\r\n            _product[name] = ['stock', 'minimal_stock', 'price'].includes(name) ? parseInt(val, 10) || 0 : val;\r\n        }\r\n        setProduct(_product);\r\n    };\r\n    \r\n    const itemTemplate = (option) => {\r\n        if (option.value === 'create_new') {\r\n            return <span style={{ color: 'blue' }}>{option.label}</span>;\r\n        }\r\n        return option.label;\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setProduct(prevProduct => ({\r\n            ...prevProduct,\r\n            status: e.value === \"Active\" ? 1 : 2,\r\n        }));\r\n    };\r\n\r\n    const toggleInfiniteStock = () => {\r\n        setIsInfiniteStock(prev => !prev);\r\n        setProduct(prevProduct => ({\r\n            ...prevProduct,\r\n            stock: !isInfiniteStock ? 999999999 : 0\r\n        }));\r\n    };\r\n\r\n    const handleImageChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setImagePreview(reader.result);\r\n                setImageFile(file);\r\n                setProduct(prevProduct => ({\r\n                    ...prevProduct,\r\n                    image: file.name\r\n                }));\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    const saveProductHandler = () => {\r\n        if (\r\n            !product.product_name ||\r\n            !product.merk_id ||\r\n            !product.category_id ||\r\n            !product.price ||\r\n            !product.minimal_stock ||\r\n            (!isInfiniteStock && !product.stock) \r\n           ) {\r\n            setSubmitted(true);\r\n            return;\r\n        }\r\n\r\n        saveProduct();\r\n        hideDialog();\r\n    };\r\n\r\n    const hideDialogHandler = () => {\r\n        setSubmitted(false);\r\n        hideDialog();\r\n    };\r\n\r\n    const productDialogFooter = (\r\n        <>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialogHandler} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveProductHandler} />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Dialog visible={visible} style={{ width: '600px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialogHandler}>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"barcode\">Barcode</label>\r\n                <InputText\r\n                    id=\"barcode\"\r\n                    value={product.barcode}\r\n                    onChange={(e) => onInputChange(e, 'barcode')}\r\n                    required\r\n                    autoFocus\r\n                    className={classNames({ 'p-invalid': submitted && !product.barcode })}\r\n                />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"product_name\">Product name</label>\r\n                <InputText\r\n                    id=\"product_name\"\r\n                    value={product.product_name}\r\n                    onChange={(e) => onInputChange(e, 'product_name')}\r\n                    required\r\n                    autoFocus\r\n                    className={classNames({ 'p-invalid': submitted && !product.product_name })}\r\n                />\r\n                {submitted && !product.product_name && <small className=\"p-invalid\">Product name is required.</small>}\r\n            </div>\r\n\r\n            <div className=\"field\" style={{ display: 'flex', gap: '1rem' }}>\r\n                <div style={{ flex: 1 }}>\r\n                    <label htmlFor=\"merk\">Merk</label>\r\n                    <Dropdown\r\n    id=\"merk\"\r\n    value={product.merk_id} // Use merk_id\r\n    options={[...merkOptions, { label: 'Create New', value: 'create_new' }]}\r\n    itemTemplate={itemTemplate}\r\n    onChange={(e) => {\r\n        if (e.value === 'create_new') window.location.href = '/pages/merk';\r\n        else onInputChange(e, 'merk');\r\n    }}\r\n    optionLabel=\"label\"\r\n    optionValue=\"value\"\r\n    placeholder=\"Select Merk\"\r\n    className={classNames({ 'p-invalid': submitted && !product.merk_id })}\r\n/>\r\n\r\n                    {submitted && !product.merk && <small className=\"p-invalid\">Merk is required.</small>}\r\n                </div>\r\n\r\n                <div style={{ flex: 1 }}>\r\n                    <label htmlFor=\"category\">Category</label>\r\n                    <Dropdown\r\n    id=\"category\"\r\n    value={product.category_id} // Use category_id\r\n    options={[...categoryOptions, { label: 'Create New', value: 'create_new' }]}\r\n    itemTemplate={itemTemplate}\r\n    onChange={(e) => {\r\n        if (e.value === 'create_new') window.location.href = '/pages/category';\r\n        else onInputChange(e, 'category');\r\n    }}\r\n    optionLabel=\"label\"\r\n    optionValue=\"value\"\r\n    placeholder=\"Select Category\"\r\n    className={classNames({ 'p-invalid': submitted && !product.category_id })}\r\n/>\r\n                    {submitted && !product.category && <small className=\"p-invalid\">Category is required.</small>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"field\" style={{ display: 'flex', gap: '1rem' }}>\r\n                <div style={{ flex: 1 }}>\r\n                    <label htmlFor=\"minimal_stock\">Minimal Stock</label>\r\n                    <InputText\r\n                        id=\"minimal_stock\"\r\n                        value={product.minimal_stock}\r\n                        onChange={(e) => onInputChange(e, 'minimal_stock')}\r\n                        required\r\n                        className={classNames({ 'p-invalid': submitted && !product.minimal_stock })}\r\n                    />\r\n                    {submitted && !product.minimal_stock && <small className=\"p-invalid\">Minimal stock is required.</small>}\r\n                </div>\r\n\r\n                <div style={{ flex: 1 }}>\r\n                    <label htmlFor=\"stock\">Stock</label>\r\n                    <InputText\r\n                        id=\"stock\"\r\n                        value={isInfiniteStock ? 'âˆž' : product.stock}\r\n                        onChange={(e) => onInputChange(e, 'stock')}\r\n                        required\r\n                        disabled={isInfiniteStock}\r\n                        className={classNames({ 'p-invalid': submitted && !product.stock })}\r\n                    />\r\n                    {submitted && !product.stock && <small className=\"p-invalid\">Stock is required.</small>}\r\n                </div>\r\n\r\n                <div className=\"field-checkbox\">\r\n                    <Checkbox inputId=\"infiniteStock\" checked={isInfiniteStock} onChange={toggleInfiniteStock} />\r\n                    <label htmlFor=\"infiniteStock\">Infinite Stock</label>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n                <label htmlFor=\"price\">Price</label>\r\n                <InputText\r\n                    id=\"price\"\r\n                    value={formatCurrency(product.price)}\r\n                    onChange={(e) => onInputChange(e, 'price')}\r\n                    required\r\n                    className={classNames({ 'p-invalid': submitted && !product.price })}\r\n                />\r\n                {submitted && !product.price && <small className=\"p-invalid\">Price is required.</small>}\r\n            </div>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <InputTextarea\r\n                    id=\"description\"\r\n                    value={product.description}\r\n                    onChange={(e) => onInputChange(e, 'description')}\r\n                    rows={3}\r\n                    cols={20}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"field-radiobutton\">\r\n                <RadioButton inputId=\"statusActive\" name=\"status\" value=\"Active\" onChange={onStatusChange} checked={product.status === 1} />\r\n                <label htmlFor=\"statusActive\">Active</label>\r\n\r\n                <RadioButton inputId=\"statusInactive\" name=\"status\" value=\"Inactive\" onChange={onStatusChange} checked={product.status === 2} />\r\n                <label htmlFor=\"statusInactive\">Inactive</label>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ProductCreateDialog;\r\n"
        }
    ]
}