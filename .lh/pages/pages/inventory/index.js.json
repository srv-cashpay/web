{
    "sourceFile": "pages/pages/inventory/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736762660513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736762660513,
            "name": "Commit-0",
            "content": "import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport withAuth from '../../../layout/context/withAuth';\r\nimport { Dropdown } from 'primereact/dropdown'; \r\nimport { fetchProducts, createProduct,updateExistingProduct, bulkDeleteProducts } from '../inventory/api'; // Pastikan jalur ini sesuai\r\nimport { deleteProduct as deleteProductById } from '../inventory/api';\r\nimport ProductCreateDialog from '../inventory/Dialogs/ProductCreateDialog';  // Import komponen MerkDialog\r\nimport ProductUpdateDialog from '../inventory/Dialogs/ProductUpdateDialog';\r\nimport UploadImageDialog from '../inventory/Dialogs/UploadImageDialog';\r\nimport { Badge } from 'primereact/badge';\r\n\r\nconst Inventory = () => {\r\n    let emptyProduct = {\r\n        id: null,\r\n        user :{\r\n            product_name: '',\r\n        },\r\n        image: null,\r\n        description: '',\r\n        category: '',\r\n        quantity: 0,\r\n        status: 0,\r\n        minimal_stock: 0,\r\n        merk:'',\r\n        stock: 0,\r\n        price: 0\r\n    }; \r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [productUpdateDialog, setProductUpdateDialog] = useState(false);\r\n    const [uploadImageDialog, setProductUploadDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10); // Default 10\r\n    const [stockAdjustmentDialog, setStockAdjustmentDialog] = useState(false);\r\n\r\n    const handleRowsPerPageChange = (newRowsPerPage) => {\r\n        setRowsPerPage(newRowsPerPage);\r\n        setPaginationData(prev => ({ ...prev, limit: newRowsPerPage, page: 1 })); // Reset ke halaman 1 saat limit berubah\r\n    };\r\n    \r\n    const [paginationData, setPaginationData] = useState({\r\n        page: 1, // Start from page 1 as per your requirement\r\n        totaPages: 0,\r\n        limit: 10, // Default limit to 10\r\n        totalData: 0,\r\n        totalRows: 0,\r\n        nextPage: 0,\r\n    });\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetchProducts({ page: paginationData.page, limit: rowsPerPage,  totalPages: paginationData.totalPages});\r\n                setProducts(Array.isArray(response.rows) ? response.rows : []);\r\n\r\n                setPaginationData(prev => ({\r\n                    ...prev,\r\n                    totalPages: response.total_page,  // Ambil total halaman dari respons API\r\n                    totalData: response.total_data,\r\n                    totalRows: response.total_rows,\r\n                    nextPage: response.next_page\r\n                    \r\n                }));\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n        fetchData();\r\n        console.log(\"Updated Pagination Data:\", paginationData);  // Log setiap kali paginationData berubah\r\n\r\n    }, [paginationData.page, rowsPerPage, paginationData.totalPages]); \r\n   \r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    };\r\n\r\n    const openEdit = (productData) => {\r\n        setProduct({ ...productData });\r\n        setSubmitted(false);\r\n        setProductUpdateDialog(true);\r\n    };\r\n\r\n    const openUpload = (productData) => {\r\n        setProduct({ ...productData });\r\n        setSubmitted(false);\r\n        setProductUploadDialog(true);\r\n    };    \r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    };\r\n\r\n    const hideUpdateDialog = () => {\r\n        setSubmitted(false);\r\n        setProductUpdateDialog(false);\r\n    };\r\n\r\n    const hideUploadDialog = () => {\r\n        setSubmitted(false);\r\n        setProductUploadDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    };\r\n\r\n    const saveProduct = () => {\r\n        saveDataToApi();        \r\n    };\r\n\r\n    const saveDataToApi = async () => {\r\n        try { \r\n            const response = await createProduct(product);\r\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: response.message, life: 3000 });\r\n        } catch (error) {\r\n            console.error(\"Error saving data:\", error);\r\n            toast.current.show({ severity: 'error', summary: 'Error', detail: error.response.data.meta.message, life: 3000 });\r\n        }\r\n    };\r\n\r\n    const updateProduct = () => {\r\n        updateDataToApi();\r\n    };\r\n\r\n    const handleUploadImage = async (file) => {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n    \r\n        try {\r\n            const response = await uploadProductImage(product.id, formData);\r\n            toast.current.show({ severity: 'success', summary: 'Uploaded', detail: response.message, life: 3000 });\r\n            setProductUploadDialog(false);\r\n        } catch (error) {\r\n            toast.current.show({\r\n                severity: 'error',\r\n                summary: 'Upload Failed',\r\n                detail: error.message || 'Error uploading image',\r\n                life: 3000,\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    const updateDataToApi = async () => {\r\n        try { \r\n            const response = await updateExistingProduct(product); // Gantilah dengan fungsi update yang sesuai\r\n            toast.current.show({ severity: 'success', summary: 'Updated', detail: response.message, life: 3000 });\r\n        } catch (error) {\r\n            console.error(\"Error updating data:\", error);\r\n            toast.current.show({ severity: 'error', summary: 'Error', detail: error.response?.data?.meta?.message, life: 3000 });\r\n        }\r\n    };\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    };\r\n    \r\n    const deleteProduct = async () => {\r\n        try {\r\n            await deleteProductById(product.id); // Use the renamed function to delete by id\r\n            const _products = products.filter((val) => val.id !== product.id);\r\n            setProducts(_products);\r\n            setDeleteProductDialog(false);\r\n            setProduct(emptyProduct);\r\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n        } catch (error) {\r\n            console.error(\"Error deleting product:\", error);\r\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'Failed to delete product', life: 3000 });\r\n        }\r\n    };\r\n    \r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    };\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    };\r\n\r\n    const showStockAdjustmentDialog = () => {\r\n        setStockAdjustmentDialog(true);\r\n    };\r\n    \r\n    const hideStockAdjustmentDialog = () => {\r\n        setStockAdjustmentDialog(false);\r\n    };\r\n\r\n    const bulkDeleteSelectedProducts = async () => {\r\n        try {\r\n            const selectedProductIds = selectedProducts.map((product) => product.id);\r\n            await bulkDeleteProducts(selectedProductIds);\r\n            const _products = products.filter((product) => !selectedProductIds.includes(product.id));\r\n            setProducts(_products);\r\n            setDeleteProductsDialog(false);\r\n            setSelectedProducts(null);\r\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n        } catch (error) {\r\n            console.error(\"Error deleting products:\", error);\r\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'Failed to delete products', life: 3000 });\r\n        }\r\n    };    \r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"my-2\">\r\n                    <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                    <Button label=\"Bulk Delete\" icon=\"pi pi-trash\" className=\"p-button-danger mr-2\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n                    <Button\r\n                        label=\"Stock Adjustment\"\r\n                        icon=\"pi pi-plus\"\r\n                        className=\"p-button-success mr-2\"\r\n                        onClick={showStockAdjustmentDialog}\r\n                    />\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"mr-2 inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const nameBodyTemplate = (rowData) => {\r\n        return (\r\n            <span\r\n            style={{\r\n                cursor: 'pointer',\r\n                color: 'blue',\r\n                \r\n            }}\r\n            onClick={() => openEdit(rowData)}\r\n        >\r\n            {rowData.product_name}\r\n        </span>\r\n        );\r\n    };\r\n\r\n    const categoryBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Date</span>\r\n                {rowData.created_at}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const idBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">ID</span>\r\n                {rowData.id}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const stockBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Stock</span>\r\n                {rowData.stock}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return (\r\n            <div style={{ textAlign: 'center' }}>\r\n                {rowData.image && rowData.image.file_path ? (\r\n                    <img\r\n                        src={`http://192.168.14.248:2358/${rowData.image.file_path}`}\r\n                        alt={rowData.product_name}\r\n                        style={{\r\n                            width: '70px',\r\n                            height: '70px',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '4px',\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <span>No Image</span>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n    \r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Price</span>\r\n                {rowData.price}\r\n            </>\r\n        );\r\n    };    \r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Status</span>\r\n                <Badge\r\n                    value={rowData.status === 1 ? 'Active' : 'Inactive'}\r\n                    severity={rowData.status === 1 ? 'success' : 'danger'}\r\n                    className=\"ml-2\"\r\n                />\r\n            </>\r\n        );\r\n    };  \r\n\r\n    const handleNextPage = () => {\r\n        setPaginationData(prev => {\r\n            const nextPage = prev.page + 1;\r\n            return { ...prev, page: nextPage > prev.totalPages ? prev.totalPages : nextPage };\r\n        });\r\n    };\r\n    const handlePreviousPage = () => {\r\n        setPaginationData(prev => {\r\n            const previousPage = prev.page - 1;\r\n            return { ...prev, page: previousPage < 1 ? 1 : previousPage };\r\n        });\r\n    };\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <Button icon=\"pi pi-image\" className=\"p-button-rounded p-button-warning mr-1\" onClick={() => openUpload(rowData)} />\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-1\" onClick={() => openEdit (rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const header = (\r\n        <div className=\"flex flex-column md:flex-row md:justify-content-between md:align-items-center\">\r\n            <h5 className=\"m-0\">Manage Products</h5>\r\n            <span className=\"block mt-2 md:mt-0 p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    const deleteProductDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteProduct} />\r\n        </>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={bulkDeleteSelectedProducts} />\r\n\r\n        </>\r\n    );\r\n\r\n    const nomorBodyTemplate = (_, { rowIndex }) => {\r\n        // Calculate the row number based on the current page and rows per page\r\n        const nomor = (paginationData.page - 1) * rowsPerPage + rowIndex + 1;\r\n        return (\r\n            <span>{nomor}</span>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"grid crud-demo\">\r\n            <div className=\"col-12\">\r\n                <div className=\"card\">\r\n                    <Toast ref={toast} />\r\n                    <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                    <DataTable\r\n                       ref={dt}\r\n                       value={products}\r\n                       selection={selectedProducts}\r\n                       onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                       dataKey=\"id\"\r\n                       className=\"datatable-responsive\"\r\n                       globalFilter={globalFilter}\r\n                       emptyMessage=\"No products found.\"\r\n                       header={header}\r\n                       responsiveLayout=\"scroll\"                   \r\n                    >\r\n                        <Column selectionMode=\"multiple\" headerStyle={{ width: '4rem' }}></Column>\r\n                        <Column field=\"nomor\" header=\"No\" body={nomorBodyTemplate} style={{ width: '5%' }} />\r\n                        <Column field=\"image\" header=\"Image\" body={imageBodyTemplate} />\r\n                        <Column field=\"id\" header=\"ID\" body={idBodyTemplate} style={{ width: '5%' }} />\r\n                        <Column field=\"product_name\" header=\"Name\" sortable body={nameBodyTemplate} headerStyle={{ minWidth: '10rem' }}></Column>\r\n                        <Column field=\"created_at\" header=\"Date\" sortable body={categoryBodyTemplate}></Column>\r\n                        <Column field=\"stock\" header=\"Stock\" body={stockBodyTemplate} />\r\n                        <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} />\r\n                        <Column field=\"status\" header=\"Status\" body={statusBodyTemplate}></Column>\r\n                        <Column field=\"action\" body={actionBodyTemplate} ></Column>\r\n                    </DataTable>\r\n\r\n                    <div className=\"paginator-buttons\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                    <div className=\"flex justify-content-between align-items-center\">\r\n                        <Button icon=\"pi pi-angle-left\" className=\"p-button-text\" onClick={handlePreviousPage} disabled={paginationData.page === 1} />\r\n                        <span>{`Page ${paginationData.page} of ${paginationData.totalPages }`}</span>\r\n                        <Button icon=\"pi pi-angle-right\" className=\"p-button-text\" onClick={handleNextPage} disabled={paginationData.page === paginationData.totalPages} />\r\n                        <span>{`Inventory ${paginationData.totalRows } Products`}</span>\r\n                    </div>\r\n                                <Dropdown\r\n                        value={rowsPerPage}\r\n                        options={[10, 25, 50]} // Opsi untuk jumlah baris per halaman\r\n                            onChange={(e) => handleRowsPerPageChange(e.value)} // Panggil fungsi ketika nilai dropdown diubah\r\n                            placeholder=\"Rows per page\"\r\n                            className=\"ml-2\"\r\n                        />\r\n                </div>              \r\n                        <ProductCreateDialog\r\n                        visible={productDialog}\r\n                        product={product}\r\n                        setProduct={setProduct}\r\n                        hideDialog={hideDialog}\r\n                        saveProduct={saveProduct}\r\n                        submitted={submitted}\r\n                        />\r\n                         <ProductUpdateDialog\r\n                            visible={productUpdateDialog}\r\n                            product={product}\r\n                            setProduct={setProduct}\r\n                            hideDialog={hideUpdateDialog}\r\n                            updateProduct={updateProduct}\r\n                            submitted={submitted}\r\n                        />\r\n                         <UploadImageDialog\r\n                            visible={uploadImageDialog}\r\n                            product={product}\r\n                            setProduct={setProduct}\r\n                            hideDialog={hideUploadDialog}\r\n                            onUpload={handleUploadImage} \r\n                            submitted={submitted}\r\n                        />\r\n\r\n                    <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {product && (\r\n                                <span>\r\n                                    Are you sure you want to delete <b>{product.product_name}</b>?\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog\r\n                    visible={stockAdjustmentDialog}\r\n                    style={{ width: '30vw' }}\r\n                    header=\"Stock Adjustment\"\r\n                    modal\r\n                    onHide={hideStockAdjustmentDialog}\r\n                >\r\n                    <DataTable value={products} responsiveLayout=\"scroll\">\r\n                        <Column field=\"product_name\" header=\"Name\" />\r\n                        <Column field=\"stock\" header=\"Current Stock\" />\r\n                        <Column\r\n                            field=\"adjustment\"\r\n                            header=\"Adjustment\"\r\n                            body={(rowData) => (\r\n                                <InputText\r\n                                style={{ width: '7vw' }}\r\n                                    type=\"number\"\r\n                                    onChange={(e) => {\r\n                                        const newProducts = products.map((product) =>\r\n                                            product.id === rowData.id\r\n                                                ? { ...product, adjustment: parseInt(e.target.value, 10) || 0 }\r\n                                                : product\r\n                                        );\r\n                                        setProducts(newProducts);\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </DataTable>\r\n                    <div className=\"flex justify-content-end mt-3\">\r\n                        <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideStockAdjustmentDialog} />\r\n                        <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-success\" onClick={() => { /* Tambahkan fungsi simpan */ }} />\r\n                    </div>\r\n                </Dialog>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuth(Inventory);\r\n"
        }
    ]
}