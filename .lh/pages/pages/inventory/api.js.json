{
    "sourceFile": "pages/pages/inventory/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736762679917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736762679917,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\n// Membuat instance Axios\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://192.168.14.248:2358/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Fungsi untuk mendapatkan token dari cookies\r\nconst getTokenFromCookie = () => Cookies.get('token');\r\n\r\n// Fungsi untuk merefresh token\r\nconst refreshAuthToken = async () => {\r\n    const refreshToken = Cookies.get('refresh_token'); // Ambil refresh token dari cookies\r\n    if (!refreshToken) throw new Error('No refresh token available');\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            'http://192.168.14.248:2356/api/auth/refresh',\r\n            { refresh_token: refreshToken },\r\n            {\r\n                headers: {\r\n                    'x-api-key': '3f=Pr#g1@RU-nw=30', // Tambahkan header x-api-key\r\n                },\r\n            }\r\n        );\r\n        \r\n        if (response.data && response.data.data.access_token) {\r\n            const newToken = response.data.data.access_token;\r\n            Cookies.set('token', newToken); // Simpan token baru di cookies\r\n            return newToken; // Kembalikan token baru\r\n        } else {\r\n            throw new Error('Invalid response structure');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// Interceptor untuk menambahkan token ke setiap request\r\naxiosInstance.interceptors.request.use(\r\n    async (config) => {\r\n        const token = getTokenFromCookie();\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor untuk menangani error respons\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.warn('Token expired. Attempting to refresh...');\r\n            try {\r\n                const newToken = await refreshAuthToken();\r\n                error.config.headers.Authorization = `Bearer ${newToken}`;\r\n                return axiosInstance.request(error.config); // Retry original request\r\n            } catch (refreshError) {\r\n                console.error('Failed to refresh token:', refreshError);\r\n                window.location.href = '/accounts/tap/login'; // Redirect ke login jika refresh token gagal\r\n                throw refreshError;\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// Fungsi untuk mengambil data Merk\r\nexport const fetchMerkData = async () => {\r\n    try {\r\n        const response = await axiosInstance.get('/merchant/product/merk');\r\n        return response.data; // Asumsikan data ada langsung di `data`\r\n    } catch (error) {\r\n        console.error('Error fetching Merk data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk mengambil data Category\r\nexport const fetchCategoryData = async () => {\r\n    try {\r\n        const response = await axiosInstance.get('/merchant/product/category');\r\n        return response.data; // Asumsikan data ada langsung di `data`\r\n    } catch (error) {\r\n        console.error('Error fetching Category data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk mengambil data produk\r\nexport const fetchProducts = async (paginationData) => {\r\n    try {\r\n        const response = await axiosInstance.get('/merchant/product/pagination', {\r\n            params: paginationData,\r\n        });\r\n        return response.data.data; // Data produk\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk membuat produk baru\r\nexport const createProduct = async (product) => {\r\n    try {\r\n        const response = await axiosInstance.post('/merchant/product/create', product);\r\n        return response.data; // Respons data\r\n    } catch (error) {\r\n        console.error('Error creating product:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk menghapus produk berdasarkan ID\r\nexport const deleteProduct = async (id) => {\r\n    try {\r\n        await axiosInstance.delete(`/merchant/product/${id}`);\r\n    } catch (error) {\r\n        console.error('Failed to delete product:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk menghapus produk secara bulk\r\nexport const bulkDeleteProducts = async (selectedProductIds) => {\r\n    try {\r\n        await axiosInstance.delete('/merchant/product/bulk-delete', {\r\n            data: { id: selectedProductIds },\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to delete selected products:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk memperbarui data produk\r\nexport const updateExistingProduct = async (product) => {\r\n    try {\r\n        const response = await axiosInstance.put(`/merchant/product/update/${product.id}`, {\r\n            product_name: product.product_name,\r\n            stock: product.stock,\r\n            minimal_stock: product.minimal_stock,\r\n            price: product.price,\r\n            status: product.status,\r\n            merk: product.merk,\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating product:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadImage = async (id, file) => {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n\r\n        const response = await axiosInstance.put(`/merchant/product/upload/${id}`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};"
        }
    ]
}