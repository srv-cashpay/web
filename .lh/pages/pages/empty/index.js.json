{
    "sourceFile": "pages/pages/empty/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736741923653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736741923653,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { Button } from 'primereact/button';\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\nimport { DataView } from 'primereact/dataview';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport { sendWebSocketMessage } from './websocketService'; // Import function to send message\r\n\r\nconst EmoticonSelector = ({ onSelect }) => {\r\n    const emoticons = [\r\n        '😀', '😃', '😄', '😁', '😆', '😅', '🤣', '😂', '🙂', '🙃', '😉', '😊', '😇', '🥰', '😍',\r\n        // ... (tambahkan lebih banyak emotikon jika diperlukan)\r\n    ];\r\n    const overlayPanelRef = useRef(null);\r\n\r\n    const itemTemplate = (emoticon) => (\r\n        <div className=\"p-d-flex p-ai-center p-p-2\" onClick={() => onSelect(emoticon)}>\r\n            <span className=\"p-text-center\" style={{ fontSize: '2rem' }}>{emoticon}</span>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"p-grid p-justify-center\">\r\n            <Button \r\n                label=\"😀\" \r\n                className=\"p-button-rounded p-button-secondary\"\r\n                onClick={(e) => overlayPanelRef.current.toggle(e)}\r\n            />\r\n            <OverlayPanel \r\n                ref={overlayPanelRef} \r\n                showCloseIcon={true} \r\n                dismissable={false} \r\n                className=\"p-dataview-grid-overlay\"\r\n                style={{ width: '300px', maxHeight: '300px', overflow: 'auto' }}\r\n            >\r\n                <DataView \r\n                    value={emoticons} \r\n                    itemTemplate={itemTemplate}\r\n                    rows={4}\r\n                    className=\"p-dataview-grid\"\r\n                />\r\n            </OverlayPanel>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useFetchFriends = () => {\r\n    const [friends, setFriends] = useState([]);\r\n    const getTokenFromCookie = () => {\r\n        const token = Cookies.get('token'); // <-- Replace 'yourCookieName' with the actual name of your cookie\r\n\r\n        return token;\r\n    };\r\n    useEffect(() => {\r\n        const token = getTokenFromCookie();\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('http://192.168.14.248:8080/api/v1/employee?page=1&limit=10', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n\r\n                 // Ubah ini untuk memastikan Anda mendapatkan data user dari response\r\n                 setFriends(response.data.data.map(item => ({\r\n                    ...item.user, // Ambil semua properti dari user\r\n                    value: item.user.id, // Atau gunakan id sebagai value jika Anda membutuhkannya\r\n                    label: item.user.full_name // Gunakan full_name sebagai label\r\n                })));\r\n            } catch (error) {\r\n                console.error('Error fetching friends:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return friends;\r\n};\r\n\r\nconst EmptyPage = () => {\r\n    const friends = useFetchFriends();\r\n    const [selectedFriend, setSelectedFriend] = useState(null);\r\n    const handleEmoticonSelect = (emoticon) => {\r\n        setInputText(prevText => prevText + emoticon);\r\n    };\r\n \r\n    const [messages, setMessages] = useState([]);\r\n    const [inputText, setInputText] = useState('');\r\n    const chatEndRef = useRef(null);\r\n    const [fullName, setFullName] = useState('');\r\n\r\n    const sendReply = () => {\r\n        if (selectedFriend) {\r\n            const reply = {\r\n                id: messages.length + 1,\r\n                content: `Reply from ${selectedFriend.full_name}`,\r\n                sender_id: selectedFriend.id, // ID teman yang dipilih\r\n                receiver_id: fullName,\r\n                type: 'received'\r\n            };\r\n            setMessages([...messages, reply]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const storedFullName =  Cookies.get('use');\r\n\r\n        if (storedFullName) {\r\n            setFullName(storedFullName);\r\n        }\r\n        if (messages.length > 0 && messages[messages.length - 1].type === 'sent') {\r\n            const timeout = setTimeout(() => {\r\n                sendReply();\r\n            }, 2000); \r\n\r\n            return () => clearTimeout(timeout); \r\n            \r\n        }\r\n        console.log(\"Messages:\", messages);\r\n\r\n    }, [messages]);\r\n\r\n    const sendMessage = () => {\r\n        if (inputText.trim() !== '' && selectedFriend) {\r\n            const newMessage = {\r\n                id: messages.length + 1,\r\n                content: inputText.trim(),  // Menggunakan 'content' alih-alih 'text' sesuai dengan struktur backend\r\n                sender_id: fullName,  // Ganti dengan ID pengirim yang sesuai\r\n                receiver_id: selectedFriend.id,    // Menggunakan ID penerima yang dipilih\r\n                timestamp: new Date().toISOString(),\r\n                type: 'sent'\r\n            };\r\n            \r\n            // Kirim pesan melalui WebSocket\r\n            sendWebSocketMessage(newMessage);\r\n    \r\n            // Tambahkan pesan ke daftar pesan lokal\r\n            setMessages(prevMessages => [...prevMessages, newMessage]);\r\n            \r\n            // Reset input teks\r\n            setInputText('');\r\n        }\r\n    };\r\n\r\n    const fetchChatHistory = async (senderId, receiverId) => {\r\n        try {\r\n            const response = await axios.get(`http://192.168.14.248:8080/api/v1/chat/history?sender_id=${senderId}&receiver_id=${receiverId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${Cookies.get('token')}`\r\n                }\r\n            });\r\n            \r\n            // Check if the response contains the expected data structure\r\n            if (response.data && Array.isArray(response.data)) {\r\n                return response.data;\r\n            } else {\r\n                console.log('Unexpected response structure:', response.data);\r\n                return [];\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.error('Error fetching chat history:', error.response ? error.response.data : error.message);\r\n            // Handle the error (e.g., display an error message to the user)\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const handleFriendSelect = async (friend) => {\r\n        setSelectedFriend(friend);\r\n        const history = await fetchChatHistory(fullName, friend.id); // Ganti dengan ID Anda\r\n        setMessages(history);\r\n    };\r\n    \r\n    return (\r\n        <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                <Dropdown \r\n                    value={selectedFriend ? selectedFriend.id : null} \r\n                    options={friends} \r\n                    onChange={(e) => handleFriendSelect(friends.find(friend => friend.id === e.value))} \r\n                    optionLabel=\"full_name\"\r\n                    placeholder=\"Select a friend\" \r\n                />\r\n                </div>\r\n            </div>\r\n           <div className=\"card-body\" style={{ flex: 1, overflowY: 'auto', padding: '8px', display: 'flex', flexDirection: 'column' }}>\r\n                {/* Map over the messages array and display each message */}\r\n                {messages.map((message) => (\r\n    <div \r\n        key={message.id} \r\n        style={{\r\n            textAlign: 'left',\r\n            marginBottom: '4px',\r\n            alignSelf: message.type === 'sent' ? 'flex-end' : 'flex-start'\r\n        }}\r\n    >\r\n        <div \r\n            style={{\r\n                display: 'inline-block',\r\n                borderRadius: '12px',\r\n                padding: '8px',\r\n                backgroundColor: message.type === 'sent' ? '#DCF8C6' : '#E5E5EA',\r\n                whiteSpace: 'pre-wrap'\r\n            }}\r\n        >\r\n            {/* Display the message content */}\r\n            {Array.isArray(message.content) ? message.content.join('\\n') : message.content}\r\n        </div>\r\n    </div>\r\n))}\r\n\r\n                <div ref={chatEndRef} />\r\n            </div>\r\n\r\n            <div className=\"card-footer\" style={{ padding: '8px', borderTop: '1px solid #ccc' }}>\r\n                <div className=\"p-inputgroup\">\r\n                    <InputTextarea \r\n                        placeholder=\"Type your message...\" \r\n                        value={inputText}\r\n                        onChange={(e) => setInputText(e.target.value)}\r\n                    />\r\n                    <Button \r\n                        label=\"Send\" \r\n                        className=\"p-button-secondary\" \r\n                        icon=\"pi pi-send\" \r\n                        onClick={sendMessage}\r\n                    />\r\n                </div>\r\n                <EmoticonSelector onSelect={handleEmoticonSelect} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmptyPage;\r\n"
        }
    ]
}