{
    "sourceFile": "pages/pages/ticket/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1736741923684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1736741923684,
            "name": "Commit-0",
            "content": "import getConfig from 'next/config';\r\nimport { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { classNames } from 'primereact/utils';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport withAuth from '../../../layout/context/withAuth';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport { Calendar } from 'primereact/calendar';\r\n\r\nconst Ticket = () => {\r\n    let emptyEmployee = {\r\n        id: null,\r\n        user :{\r\n            full_name: '',\r\n        },\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        quantity: 0,\r\n        status_account: false,\r\n        salary: ''  // Add this line\r\n\r\n    };\r\n\r\n    const [employees, setEmployees] = useState(null);\r\n    const [employeeDialog, setEmployeeDialog] = useState(false);\r\n    const [deleteEmployeeDialog, setDeleteEmployeeDialog] = useState(false);\r\n    const [deleteEmployeesDialog, setDeleteEmployeesDialog] = useState(false);\r\n    const [employee, setEmployee] = useState(emptyEmployee);\r\n    const [selectedEmployees, setSelectedEmployees] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [calendarValue, setCalendarValue] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const contextPath = getConfig().publicRuntimeConfig.contextPath;\r\n\r\n    const getTokenFromCookie = () => {\r\n        const token = Cookies.get('token'); // <-- Replace 'yourCookieName' with the actual name of your cookie\r\n\r\n        return token;\r\n    };\r\n\r\n    const [paginationData, setPaginationData] = useState({\r\n        page: 0,\r\n        totalPages: 0,\r\n        limit: 0,\r\n        totalData: 0,\r\n        totalRows: 0,\r\n        nextPage: 0\r\n\r\n    });\r\n    \r\n    \r\n   \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const token = getTokenFromCookie();\r\n                const response = await axios.get(`http://192.168.14.248:8080/api/v1/employee?page=${paginationData.page}&limit=${paginationData.limit}`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                });\r\n    \r\n                // Update employees and pagination data\r\n                setEmployees(response.data.data);\r\n                setPaginationData({\r\n                    ...paginationData,\r\n                    totalPages: Math.ceil(response.data.total_data / paginationData.limit),\r\n                    totalData: response.data.total_data,  // Ambil totalData dari respons\r\n                    nextPage: response.data.next_page,\r\n                    totalRows: response.data.total_rows,\r\n                    limit:response.data.total_data\r\n                    \r\n                });\r\n    \r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [paginationData.page, paginationData.limit]);\r\n\r\n  \r\n\r\n    const openNew = () => {\r\n        setEmployee(emptyEmployee);\r\n        setSubmitted(false);\r\n        setEmployeeDialog(true);\r\n    };\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setEmployeeDialog(false);\r\n    };\r\n\r\n    const hideDeleteEmployeeDialog = () => {\r\n        setDeleteEmployeeDialog(false);\r\n    };\r\n\r\n    const hideDeleteEmployeesDialog = () => {\r\n        setDeleteEmployeesDialog(false);\r\n    };\r\n\r\n    const saveEmployee = () => {\r\n       \r\n            saveDataToApi();\r\n\r\n        \r\n    };\r\n\r\n    const saveDataToApi = async () => {\r\n        try {\r\n            const token = getTokenFromCookie();\r\n            \r\n            // Assuming you want to send the `employee` state as the data payload\r\n            const response = await axios.post(`http://192.168.14.248:8080/api/v1/employee`, employee, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n    \r\n            if (response.status === 200) {\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: response.data.message, life: 3000 });\r\n                // You can update the UI or perform other actions upon successful save\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error saving data:\", error);\r\n            toast.current.show({ severity: 'error', summary: 'Error', detail: error.response.data.meta.message, life: 3000 });\r\n        }\r\n    };\r\n    \r\n\r\n    const editEmployee = (employee) => {\r\n        setEmployee({ ...employee });\r\n        setEmployeeDialog(true);\r\n    };\r\n\r\n    const confirmDeleteEmployee = (employee) => {\r\n        setEmployee(employee);\r\n        setDeleteEmployeeDialog(true);\r\n    };\r\n\r\n    const deleteEmployee = () => {\r\n        let _employees = employees.filter((val) => val.id !== employee.id);\r\n        setEmployees(_employees);\r\n        setDeleteEmployeeDialog(false);\r\n        setEmployee(emptyEmployee);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Employee Deleted', life: 3000 });\r\n    };\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < employees.length; i++) {\r\n            if (employees[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    };\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    };\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteEmployeesDialog(true);\r\n    };\r\n\r\n    const deleteSelectedEmployees = () => {\r\n        let _employees = employees.filter((val) => !selectedEmployees.includes(val));\r\n        setEmployees(_employees);\r\n        setDeleteEmployeesDialog(false);\r\n        setSelectedEmployees(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Employees Deleted', life: 3000 });\r\n    };\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _employee = { ...employee };\r\n        _employee['category'] = e.value;\r\n        setEmployee(_employee);\r\n    };\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _employee = { ...employee };\r\n        _employee[`${name}`] = val;\r\n\r\n        setEmployee(_employee);\r\n    };\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _employee = { ...employee };\r\n        _employee[`${name}`] = val;\r\n\r\n        setEmployee(_employee);\r\n    };\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"my-2\">\r\n                    <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                    <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedEmployees || !selectedEmployees.length} />\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"mr-2 inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const nameBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Name</span>\r\n                {rowData.user.full_name}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const categoryBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Created By</span>\r\n                {rowData.created_by}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const salaryBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Salary</span>\r\n                {rowData.salary}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const idBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Card ID</span>\r\n                {rowData.id_card}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Status</span>\r\n                {rowData.status_account ? 'Active' : 'Inactive'}\r\n            </>\r\n        );\r\n    };\r\n    \r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editEmployee(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteEmployee(rowData)} />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const header = (\r\n        <div className=\"flex flex-column md:flex-row md:justify-content-between md:align-items-center\">\r\n            <h5 className=\"m-0\">Manage Employees</h5>\r\n            <span className=\"block mt-2 md:mt-0 p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    const employeeDialogFooter = (\r\n        <>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveEmployee} />\r\n        </>\r\n    );\r\n    const deleteEmployeeDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteEmployeeDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteEmployee} />\r\n        </>\r\n    );\r\n    const deleteEmployeesDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteEmployeesDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedEmployees} />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"grid crud-demo\">\r\n            <div className=\"col-12\">\r\n                <div className=\"card\">\r\n                    <Toast ref={toast} />\r\n                    <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                    <DataTable\r\n                        ref={dt}\r\n                        value={employees}\r\n                        selection={selectedEmployees}\r\n                        onSelectionChange={(e) => setSelectedEmployees(e.value)}\r\n                        dataKey=\"id\"\r\n                        paginator\r\n                        rows={10}\r\n                        rowsPerPageOptions={[10, 25, 50]}\r\n                        className=\"datatable-responsive\"\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        // paginatorTemplate={`FirstPageLink PrevPageLink PageLinks ${(paginationData.limit === 10 && paginationData.nextPage) ? paginationData.nextPage : ''} LastPageLink CurrentPageReport RowsPerPageDropdown`}\r\n\r\n                        currentPageReportTemplate={`Showing {first} to {last} of  ${paginationData.totalData} products`}\r\n                        globalFilter={globalFilter}\r\n                        emptyMessage=\"No employees found.\"\r\n                        header={header}\r\n                        responsiveLayout=\"scroll\"\r\n\r\n                    >\r\n                        <Column selectionMode=\"multiple\" headerStyle={{ width: '4rem' }}></Column>\r\n                        <Column field=\"id\" header=\"Card ID\" sortable body={idBodyTemplate} />\r\n                        <Column field=\"full_name\" header=\"Name\" sortable body={nameBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>\r\n                        <Column field=\"created_by\" header=\"Created By\" sortable body={categoryBodyTemplate} headerStyle={{ minWidth: '10rem' }}></Column>\r\n                        <Column field=\"status_account\" header=\"Status\" body={statusBodyTemplate} sortable headerStyle={{ minWidth: '10rem' }}></Column>\r\n                        <Column field=\"salary\" header=\"Salary\" sortable body={salaryBodyTemplate} />\r\n\r\n                        <Column body={actionBodyTemplate} headerStyle={{ minWidth: '10rem' }}></Column>\r\n                    </DataTable>\r\n\r\n                    <Dialog visible={employeeDialog} style={{ width: '450px' }} header=\"Employee Details\" modal className=\"p-fluid\" footer={employeeDialogFooter} onHide={hideDialog}>\r\n                        {employee.image && <img src={`${contextPath}/demo/images/employee/${employee.image}`} alt={employee.image} width=\"150\" className=\"mt-0 mx-auto mb-5 block shadow-2\" />}\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"full_name\">Full name</label>\r\n                            <InputText id=\"full_name\" value={employee.full_name} onChange={(e) => onInputChange(e, 'full_name')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.full_name })} />\r\n                            {submitted && !employee.full_name && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"id_card\">ID Card</label>\r\n                            <InputText id=\"id_card\" value={employee.id_card} onChange={(e) => onInputChange(e, 'id_card')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.id_card })} />\r\n                            {submitted && !employee.id_card && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"account_number\">Bank Account Number</label>\r\n                            <InputText id=\"account_number\" value={employee.account_number} onChange={(e) => onInputChange(e, 'account_number')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.account_number })} />\r\n                            {submitted && !employee.account_number && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"ktp\">Identity Number</label>\r\n                            <InputText id=\"ktp\" value={employee.ktp} onChange={(e) => onInputChange(e, 'ktp')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.ktp })} />\r\n                            {submitted && !employee.ktp && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"salary\">Salary</label>\r\n                            <InputText id=\"salary\" value={employee.salary} onChange={(e) => onInputChange(e, 'salary')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.salary })} />\r\n                            {submitted && !employee.salary && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"whatsapp\">Whasapp</label>\r\n                            <InputText id=\"whatsapp\" value={employee.whatsapp} onChange={(e) => onInputChange(e, 'whatsapp')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.whatsapp })} />\r\n                            {submitted && !employee.whatsapp && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"formgrid grid\">\r\n                            <div className=\"field col\">\r\n                                <label htmlFor=\"place_of_birth\">Place of birth</label>\r\n                                <InputText id=\"place_of_birth\" value={employee.place_of_birth} onValueChange={(e) => onInputChange(e, 'place_of_birth')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                            </div>\r\n                            <div className=\"field col\">\r\n                                <label htmlFor=\"date_of_birth\">Date of birth</label>\r\n                                <Calendar showIcon showButtonBar id=\"date_of_birth\" value={employee.date_of_birth} onValueChange={(e) => setCalendarValue(e, 'date_of_birth')} integeronly />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"address\">Address</label>\r\n                            <InputTextarea id=\"address\" value={employee.address} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"mb-3\">User Account</label>\r\n                            <div className=\"formgrid grid\">\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"status_account1\" name=\"status_account\" value=\"Active\" onChange={onCategoryChange} checked={employee.status_account === 'Active'} />\r\n                                    <label htmlFor=\"status_account1\">Active</label>\r\n                                </div>\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"status_account2\" name=\"status_account\" value=\"NonActive\" onChange={onCategoryChange} checked={employee.status_account === 'NonActive'} />\r\n                                    <label htmlFor=\"status_account2\">Non Active</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <InputText id=\"email\" value={employee.user.email} onChange={(e) => onInputChange(e, 'email')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.email })} />\r\n                            {submitted && !employee.email && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <InputText id=\"password\" value={employee.password} onChange={(e) => onInputChange(e, 'password')} required autoFocus className={classNames({ 'p-invalid': submitted && !employee.password })} />\r\n                            {submitted && !employee.password && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={deleteEmployeeDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteEmployeeDialogFooter} onHide={hideDeleteEmployeeDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {employee && (\r\n                                <span>\r\n                                    Are you sure you want to delete <b>{employee.full_name}</b>?\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={deleteEmployeesDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteEmployeesDialogFooter} onHide={hideDeleteEmployeesDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {employee && <span>Are you sure you want to delete the selected employees?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuth(Ticket);\r\n"
        }
    ]
}