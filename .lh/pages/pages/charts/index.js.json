{
    "sourceFile": "pages/pages/charts/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1736833920220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736834367503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,46 @@\n     const [data, setChartData] = useState({});\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n     const [startDate, setStartDate] = useState('');\r\n     const [endDate, setEndDate] = useState('');\r\n+    const [groupBy, setGroupBy] = useState('day'); // 'day', 'week', 'month'\r\n \r\n-    const filterDataByDate = (originalData, labels) => {\r\n+    const groupDataBy = (labels, data, groupBy) => {\r\n+        const groupedData = {};\r\n+        const groupedLabels = [];\r\n+\r\n+        labels.forEach((label, index) => {\r\n+            const date = new Date(label);\r\n+            let key;\r\n+\r\n+            if (groupBy === 'day') {\r\n+                key = label;\r\n+            } else if (groupBy === 'week') {\r\n+                const weekStart = new Date(date.setDate(date.getDate() - date.getDay()));\r\n+                key = weekStart.toISOString().split('T')[0];\r\n+            } else if (groupBy === 'month') {\r\n+                key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n+            }\r\n+\r\n+            if (!groupedData[key]) {\r\n+                groupedData[key] = [];\r\n+                groupedLabels.push(key);\r\n+            }\r\n+\r\n+            groupedData[key].push(data[index]);\r\n+        });\r\n+\r\n+        const aggregatedData = groupedLabels.map(label => {\r\n+            const values = groupedData[label];\r\n+            return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n+        });\r\n+\r\n+        return { groupedLabels, aggregatedData };\r\n+    };\r\n+\r\n+    const filterAndGroupData = (originalData, labels, groupBy) => {\r\n         if (!startDate || !endDate) {\r\n-            return { filteredData: originalData, filteredLabels: labels };\r\n+            return groupDataBy(labels, originalData, groupBy);\r\n         }\r\n \r\n         const start = new Date(startDate);\r\n         const end = new Date(endDate);\r\n@@ -26,9 +60,9 @@\n             const currentDate = new Date(label);\r\n             return currentDate >= start && currentDate <= end;\r\n         });\r\n \r\n-        return { filteredData, filteredLabels };\r\n+        return groupDataBy(filteredLabels, filteredData, groupBy);\r\n     };\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n@@ -39,10 +73,10 @@\n         const labels = ['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01', '2023-05-01', '2023-06-01', '2023-07-01'];\r\n         const dataset1 = [65, 59, 80, 81, 56, 55, 40];\r\n         const dataset2 = [28, 48, 40, 19, 86, 27, 90];\r\n \r\n-        const { filteredData: filteredDataset1, filteredLabels } = filterDataByDate(dataset1, labels);\r\n-        const { filteredData: filteredDataset2 } = filterDataByDate(dataset2, labels);\r\n+        const { groupedLabels: filteredLabels, aggregatedData: filteredDataset1 } = filterAndGroupData(dataset1, labels, groupBy);\r\n+        const { aggregatedData: filteredDataset2 } = filterAndGroupData(dataset2, labels, groupBy);\r\n \r\n         const lineData = {\r\n             labels: filteredLabels,\r\n             datasets: [\r\n@@ -96,17 +130,17 @@\n         };\r\n \r\n         setOptions({ lineOptions });\r\n         setChartData({ lineData });\r\n-    }, [layoutConfig, startDate, endDate]);\r\n+    }, [layoutConfig, startDate, endDate, groupBy]);\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n             <div className=\"col-12\">\r\n                 <div className=\"card\">\r\n                     <h5>Select Date Range</h5>\r\n                     <div className=\"grid\">\r\n-                        <div className=\"col-6\">\r\n+                        <div className=\"col-4\">\r\n                             <label htmlFor=\"startDate\">Start Date:</label>\r\n                             <input\r\n                                 id=\"startDate\"\r\n                                 type=\"date\"\r\n@@ -114,9 +148,9 @@\n                                 onChange={(e) => setStartDate(e.target.value)}\r\n                                 className=\"p-inputtext p-component\"\r\n                             />\r\n                         </div>\r\n-                        <div className=\"col-6\">\r\n+                        <div className=\"col-4\">\r\n                             <label htmlFor=\"endDate\">End Date:</label>\r\n                             <input\r\n                                 id=\"endDate\"\r\n                                 type=\"date\"\r\n@@ -124,8 +158,21 @@\n                                 onChange={(e) => setEndDate(e.target.value)}\r\n                                 className=\"p-inputtext p-component\"\r\n                             />\r\n                         </div>\r\n+                        <div className=\"col-4\">\r\n+                            <label htmlFor=\"groupBy\">Group By:</label>\r\n+                            <select\r\n+                                id=\"groupBy\"\r\n+                                value={groupBy}\r\n+                                onChange={(e) => setGroupBy(e.target.value)}\r\n+                                className=\"p-inputtext p-component\"\r\n+                            >\r\n+                                <option value=\"day\">Day</option>\r\n+                                <option value=\"week\">Week</option>\r\n+                                <option value=\"month\">Month</option>\r\n+                            </select>\r\n+                        </div>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n             <div className=\"col-12\">\r\n"
                },
                {
                    "date": 1736835638973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,93 +5,101 @@\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n-    const [startDate, setStartDate] = useState('');\r\n-    const [endDate, setEndDate] = useState('');\r\n-    const [groupBy, setGroupBy] = useState('day'); // 'day', 'week', 'month'\r\n \r\n-    const groupDataBy = (labels, data, groupBy) => {\r\n-        const groupedData = {};\r\n-        const groupedLabels = [];\r\n-\r\n-        labels.forEach((label, index) => {\r\n-            const date = new Date(label);\r\n-            let key;\r\n-\r\n-            if (groupBy === 'day') {\r\n-                key = label;\r\n-            } else if (groupBy === 'week') {\r\n-                const weekStart = new Date(date.setDate(date.getDate() - date.getDay()));\r\n-                key = weekStart.toISOString().split('T')[0];\r\n-            } else if (groupBy === 'month') {\r\n-                key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\r\n-            }\r\n-\r\n-            if (!groupedData[key]) {\r\n-                groupedData[key] = [];\r\n-                groupedLabels.push(key);\r\n-            }\r\n-\r\n-            groupedData[key].push(data[index]);\r\n-        });\r\n-\r\n-        const aggregatedData = groupedLabels.map(label => {\r\n-            const values = groupedData[label];\r\n-            return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n-        });\r\n-\r\n-        return { groupedLabels, aggregatedData };\r\n-    };\r\n-\r\n-    const filterAndGroupData = (originalData, labels, groupBy) => {\r\n-        if (!startDate || !endDate) {\r\n-            return groupDataBy(labels, originalData, groupBy);\r\n-        }\r\n-\r\n-        const start = new Date(startDate);\r\n-        const end = new Date(endDate);\r\n-\r\n-        const filteredData = originalData.filter((_, index) => {\r\n-            const currentDate = new Date(labels[index]);\r\n-            return currentDate >= start && currentDate <= end;\r\n-        });\r\n-\r\n-        const filteredLabels = labels.filter((label) => {\r\n-            const currentDate = new Date(label);\r\n-            return currentDate >= start && currentDate <= end;\r\n-        });\r\n-\r\n-        return groupDataBy(filteredLabels, filteredData, groupBy);\r\n-    };\r\n-\r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-        const labels = ['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01', '2023-05-01', '2023-06-01', '2023-07-01'];\r\n-        const dataset1 = [65, 59, 80, 81, 56, 55, 40];\r\n-        const dataset2 = [28, 48, 40, 19, 86, 27, 90];\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n \r\n-        const { groupedLabels: filteredLabels, aggregatedData: filteredDataset1 } = filterAndGroupData(dataset1, labels, groupBy);\r\n-        const { aggregatedData: filteredDataset2 } = filterAndGroupData(dataset2, labels, groupBy);\r\n+        const pieData = {\r\n+            labels: ['A', 'B', 'C'],\r\n+            datasets: [\r\n+                {\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n         const lineData = {\r\n-            labels: filteredLabels,\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n                     label: 'First Dataset',\r\n-                    data: filteredDataset1,\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n                     fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     tension: 0.4\r\n                 },\r\n                 {\r\n                     label: 'Second Dataset',\r\n-                    data: filteredDataset2,\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n                     fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     tension: 0.4\r\n@@ -128,60 +136,131 @@\n                 }\r\n             }\r\n         };\r\n \r\n-        setOptions({ lineOptions });\r\n-        setChartData({ lineData });\r\n-    }, [layoutConfig, startDate, endDate, groupBy]);\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n \r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n+        });\r\n+        setChartData({\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n+        });\r\n+    }, [layoutConfig]);\r\n+\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n-            <div className=\"col-12\">\r\n+            <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n-                    <h5>Select Date Range</h5>\r\n-                    <div className=\"grid\">\r\n-                        <div className=\"col-4\">\r\n-                            <label htmlFor=\"startDate\">Start Date:</label>\r\n-                            <input\r\n-                                id=\"startDate\"\r\n-                                type=\"date\"\r\n-                                value={startDate}\r\n-                                onChange={(e) => setStartDate(e.target.value)}\r\n-                                className=\"p-inputtext p-component\"\r\n-                            />\r\n-                        </div>\r\n-                        <div className=\"col-4\">\r\n-                            <label htmlFor=\"endDate\">End Date:</label>\r\n-                            <input\r\n-                                id=\"endDate\"\r\n-                                type=\"date\"\r\n-                                value={endDate}\r\n-                                onChange={(e) => setEndDate(e.target.value)}\r\n-                                className=\"p-inputtext p-component\"\r\n-                            />\r\n-                        </div>\r\n-                        <div className=\"col-4\">\r\n-                            <label htmlFor=\"groupBy\">Group By:</label>\r\n-                            <select\r\n-                                id=\"groupBy\"\r\n-                                value={groupBy}\r\n-                                onChange={(e) => setGroupBy(e.target.value)}\r\n-                                className=\"p-inputtext p-component\"\r\n-                            >\r\n-                                <option value=\"day\">Day</option>\r\n-                                <option value=\"week\">Week</option>\r\n-                                <option value=\"month\">Month</option>\r\n-                            </select>\r\n-                        </div>\r\n-                    </div>\r\n+                    <h5>Sales Chart</h5>\r\n+                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-            <div className=\"col-12\">\r\n+            <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n-                    <h5>Filtered Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n+                    <h5>Product Best Chart</h5>\r\n+                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n+                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n+                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n+                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n+                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736836404897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,88 +4,19 @@\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n+    const [firstDate, setFirstDate] = useState(null);\r\n+    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-        const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n-                }\r\n-            ]\r\n-        };\r\n \r\n-        const barOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n-                    },\r\n-                    grid: {\r\n-                        display: false,\r\n-                        drawBorder: false\r\n-                    }\r\n-                },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n-            datasets: [\r\n-                {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n+        // Data chart\r\n         const lineData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n@@ -110,9 +41,9 @@\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        fontColor: textColor\r\n+                        color: textColor\r\n                     }\r\n                 }\r\n             },\r\n             scales: {\r\n@@ -136,125 +67,65 @@\n                 }\r\n             }\r\n         };\r\n \r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n+        // Menentukan first date dan last date\r\n+        const labels = lineData.labels;\r\n+        setFirstDate(labels[0]); // Tanggal pertama\r\n+        setLastDate(labels[labels.length - 1]); // Tanggal terakhir\r\n \r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        setOptions({\r\n-            barOptions,\r\n-            pieOptions,\r\n-            lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n-        });\r\n-        setChartData({\r\n-            barData,\r\n-            pieData,\r\n-            lineData,\r\n-            polarData,\r\n-            radarData\r\n-        });\r\n+        setOptions({ lineOptions });\r\n+        setChartData({ lineData });\r\n     }, [layoutConfig]);\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n+            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n+                    {firstDate && lastDate && (\r\n+                        <p>\r\n+                            <strong>First Date:</strong> {firstDate} | <strong>Last Date:</strong> {lastDate}\r\n+                        </p>\r\n+                    )}\r\n                     <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Doughnut Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n                     <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Merk Type Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n                     <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Radar Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n                     <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n"
                },
                {
                    "date": 1736836418167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,88 @@\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [firstDate, setFirstDate] = useState(null);\r\n-    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-        // Data chart\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const pieData = {\r\n+            labels: ['A', 'B', 'C'],\r\n+            datasets: [\r\n+                {\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n         const lineData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n@@ -41,9 +110,9 @@\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        color: textColor\r\n+                        fontColor: textColor\r\n                     }\r\n                 }\r\n             },\r\n             scales: {\r\n@@ -67,65 +136,125 @@\n                 }\r\n             }\r\n         };\r\n \r\n-        // Menentukan first date dan last date\r\n-        const labels = lineData.labels;\r\n-        setFirstDate(labels[0]); // Tanggal pertama\r\n-        setLastDate(labels[labels.length - 1]); // Tanggal terakhir\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n \r\n-        setOptions({ lineOptions });\r\n-        setChartData({ lineData });\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n+        });\r\n+        setChartData({\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n+        });\r\n     }, [layoutConfig]);\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n-            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    {firstDate && lastDate && (\r\n-                        <p>\r\n-                            <strong>First Date:</strong> {firstDate} | <strong>Last Date:</strong> {lastDate}\r\n-                        </p>\r\n-                    )}\r\n                     <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Doughnut Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n                     <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Merk Type Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n                     <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Radar Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n                     <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n"
                },
                {
                    "date": 1736836568478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,257 +4,192 @@\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n+    const [firstDate, setFirstDate] = useState(null);\r\n+    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-        const barData = {\r\n+\r\n+        // Data untuk semua chart\r\n+        const lineData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'My First dataset',\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                    tension: 0.4,\r\n                 },\r\n                 {\r\n-                    label: 'My Second dataset',\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n-                }\r\n-            ]\r\n+                    tension: 0.4,\r\n+                },\r\n+            ],\r\n         };\r\n \r\n-        const barOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n-                    },\r\n-                    grid: {\r\n-                        display: false,\r\n-                        drawBorder: false\r\n-                    }\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'Sales',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [50, 60, 70, 80, 90, 100, 110],\r\n                 },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n+            ],\r\n         };\r\n \r\n         const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n+            labels: ['Category A', 'Category B', 'Category C'],\r\n             datasets: [\r\n                 {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n+                    data: [300, 50, 100],\r\n+                    backgroundColor: [\r\n+                        documentStyle.getPropertyValue('--primary-500'),\r\n+                        documentStyle.getPropertyValue('--primary-300'),\r\n+                        documentStyle.getPropertyValue('--primary-100'),\r\n+                    ],\r\n+                },\r\n+            ],\r\n         };\r\n \r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n+        const polarData = {\r\n+            labels: ['Brand A', 'Brand B', 'Brand C', 'Brand D'],\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [\r\n+                        documentStyle.getPropertyValue('--primary-500'),\r\n+                        documentStyle.getPropertyValue('--primary-300'),\r\n+                        documentStyle.getPropertyValue('--primary-100'),\r\n+                        documentStyle.getPropertyValue('--primary-700'),\r\n+                    ],\r\n+                },\r\n+            ],\r\n         };\r\n \r\n-        const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+        const radarData = {\r\n+            labels: ['Quality', 'Speed', 'Reliability', 'Cost', 'Features'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4\r\n+                    label: 'Product A',\r\n+                    data: [5, 3, 4, 2, 1],\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-100'),\r\n                 },\r\n-                {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n+            ],\r\n         };\r\n \r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n+                        color: textColor,\r\n+                    },\r\n+                },\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n+                        drawBorder: false,\r\n+                    },\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n-\r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n+                        drawBorder: false,\r\n+                    },\r\n+                },\r\n             },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n         };\r\n \r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n+        // Menentukan first date dan last date untuk semua chart\r\n+        const labels = lineData.labels;\r\n+        setFirstDate(labels[0]);\r\n+        setLastDate(labels[labels.length - 1]);\r\n \r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n         setOptions({\r\n-            barOptions,\r\n-            pieOptions,\r\n             lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n+            barOptions: lineOptions,\r\n+            pieOptions: lineOptions,\r\n+            polarOptions: lineOptions,\r\n+            radarOptions: lineOptions,\r\n         });\r\n+\r\n         setChartData({\r\n+            lineData,\r\n             barData,\r\n             pieData,\r\n-            lineData,\r\n             polarData,\r\n-            radarData\r\n+            radarData,\r\n         });\r\n     }, [layoutConfig]);\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n+            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n+                    {firstDate && lastDate && (\r\n+                        <p>\r\n+                            <strong>First Date:</strong> {firstDate} | <strong>Last Date:</strong> {lastDate}\r\n+                        </p>\r\n+                    )}\r\n                     <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Doughnut Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n                     <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Merk Type Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n                     <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Radar Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n                     <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n"
                },
                {
                    "date": 1736838769783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,192 +4,257 @@\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [firstDate, setFirstDate] = useState(null);\r\n-    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-\r\n-        // Data untuk semua chart\r\n-        const lineData = {\r\n+        const barData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n+                    label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4,\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n                 },\r\n                 {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n+                    label: 'My Second dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4,\r\n-                },\r\n-            ],\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'Sales',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [50, 60, 70, 80, 90, 100, 110],\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n-            ],\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n         const pieData = {\r\n-            labels: ['Category A', 'Category B', 'Category C'],\r\n+            labels: ['A', 'B', 'C'],\r\n             datasets: [\r\n                 {\r\n-                    data: [300, 50, 100],\r\n-                    backgroundColor: [\r\n-                        documentStyle.getPropertyValue('--primary-500'),\r\n-                        documentStyle.getPropertyValue('--primary-300'),\r\n-                        documentStyle.getPropertyValue('--primary-100'),\r\n-                    ],\r\n-                },\r\n-            ],\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        const polarData = {\r\n-            labels: ['Brand A', 'Brand B', 'Brand C', 'Brand D'],\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [\r\n-                        documentStyle.getPropertyValue('--primary-500'),\r\n-                        documentStyle.getPropertyValue('--primary-300'),\r\n-                        documentStyle.getPropertyValue('--primary-100'),\r\n-                        documentStyle.getPropertyValue('--primary-700'),\r\n-                    ],\r\n-                },\r\n-            ],\r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n-        const radarData = {\r\n-            labels: ['Quality', 'Speed', 'Reliability', 'Cost', 'Features'],\r\n+        const lineData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'Product A',\r\n-                    data: [5, 3, 4, 2, 1],\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-100'),\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    tension: 0.4\r\n                 },\r\n-            ],\r\n+                {\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    tension: 0.4\r\n+                }\r\n+            ]\r\n         };\r\n \r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        color: textColor,\r\n-                    },\r\n-                },\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n+\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n                 },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n             },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n-        // Menentukan first date dan last date untuk semua chart\r\n-        const labels = lineData.labels;\r\n-        setFirstDate(labels[0]);\r\n-        setLastDate(labels[labels.length - 1]);\r\n-\r\n         setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n             lineOptions,\r\n-            barOptions: lineOptions,\r\n-            pieOptions: lineOptions,\r\n-            polarOptions: lineOptions,\r\n-            radarOptions: lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n         });\r\n-\r\n         setChartData({\r\n-            lineData,\r\n             barData,\r\n             pieData,\r\n+            lineData,\r\n             polarData,\r\n-            radarData,\r\n+            radarData\r\n         });\r\n     }, [layoutConfig]);\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n-            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    {firstDate && lastDate && (\r\n-                        <p>\r\n-                            <strong>First Date:</strong> {firstDate} | <strong>Last Date:</strong> {lastDate}\r\n-                        </p>\r\n-                    )}\r\n                     <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Doughnut Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n                     <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Merk Type Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n                     <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Radar Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card flex flex-column align-items-center\">\r\n                     <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n                     <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n"
                },
                {
                    "date": 1736838973822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,266 +1,183 @@\n import { Chart } from 'primereact/chart';\r\n+import { Calendar } from 'primereact/calendar';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n+    const [filteredData, setFilteredData] = useState({});\r\n+    const [firstDate, setFirstDate] = useState(null);\r\n+    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-        const barData = {\r\n+\r\n+        const lineData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'My First dataset',\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                    tension: 0.4,\r\n                 },\r\n                 {\r\n-                    label: 'My Second dataset',\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const barOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n-                    },\r\n-                    grid: {\r\n-                        display: false,\r\n-                        drawBorder: false\r\n-                    }\r\n+                    tension: 0.4,\r\n                 },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n+            ],\r\n         };\r\n \r\n-        const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n+                    label: 'Sales',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [50, 60, 70, 80, 90, 100, 110],\r\n+                },\r\n+            ],\r\n         };\r\n \r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+        const pieData = {\r\n+            labels: ['Category A', 'Category B', 'Category C'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4\r\n+                    data: [300, 50, 100],\r\n+                    backgroundColor: [\r\n+                        documentStyle.getPropertyValue('--primary-500'),\r\n+                        documentStyle.getPropertyValue('--primary-300'),\r\n+                        documentStyle.getPropertyValue('--primary-100'),\r\n+                    ],\r\n                 },\r\n-                {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n+            ],\r\n         };\r\n \r\n+        setChartData({ lineData, barData, pieData });\r\n+        setFilteredData({ lineData, barData, pieData });\r\n+\r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n+                        color: textColor,\r\n+                    },\r\n+                },\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n+                        drawBorder: false,\r\n+                    },\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n+                        drawBorder: false,\r\n+                    },\r\n+                },\r\n+            },\r\n         };\r\n \r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n+        setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n+    }, [layoutConfig]);\r\n \r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n+    const filterDataByDate = () => {\r\n+        if (firstDate && lastDate) {\r\n+            const filterDataset = (dataset, labels) => ({\r\n+                labels: labels.filter(\r\n+                    (label, index) =>\r\n+                        index >= labels.indexOf(firstDate) &&\r\n+                        index <= labels.indexOf(lastDate)\r\n+                ),\r\n+                datasets: dataset.datasets.map((dataSet) => ({\r\n+                    ...dataSet,\r\n+                    data: dataSet.data.slice(\r\n+                        dataset.labels.indexOf(firstDate),\r\n+                        dataset.labels.indexOf(lastDate) + 1\r\n+                    ),\r\n+                })),\r\n+            });\r\n \r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n+            setFilteredData({\r\n+                lineData: filterDataset(data.lineData, data.lineData.labels),\r\n+                barData: filterDataset(data.barData, data.barData.labels),\r\n+                pieData: data.pieData, // Pie chart doesn't use date filtering\r\n+            });\r\n+        }\r\n+    };\r\n \r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n+    useEffect(() => {\r\n+        filterDataByDate();\r\n+    }, [firstDate, lastDate]);\r\n \r\n-        setOptions({\r\n-            barOptions,\r\n-            pieOptions,\r\n-            lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n-        });\r\n-        setChartData({\r\n-            barData,\r\n-            pieData,\r\n-            lineData,\r\n-            polarData,\r\n-            radarData\r\n-        });\r\n-    }, [layoutConfig]);\r\n-\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n+            {/* Date Filters */}\r\n+            <div className=\"col-12\">\r\n+                <div className=\"card\">\r\n+                    <h5>Select Date Range</h5>\r\n+                    <div className=\"grid\">\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                value={firstDate}\r\n+                                onChange={(e) => setFirstDate(e.value)}\r\n+                                placeholder=\"First Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                            />\r\n+                        </div>\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                value={lastDate}\r\n+                                onChange={(e) => setLastDate(e.value)}\r\n+                                placeholder=\"Last Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                            />\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            {/* Charts */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n+                    <Chart type=\"line\" data={filteredData.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n-                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n+                    <Chart type=\"bar\" data={filteredData.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n             <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n-                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                <div className=\"card\">\r\n+                    <h5>Payment Chart</h5>\r\n+                    <Chart type=\"pie\" data={filteredData.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n-                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n-                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n-                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736839040956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,183 +1,266 @@\n import { Chart } from 'primereact/chart';\r\n-import { Calendar } from 'primereact/calendar';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [filteredData, setFilteredData] = useState({});\r\n-    const [firstDate, setFirstDate] = useState(null);\r\n-    const [lastDate, setLastDate] = useState(null);\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-\r\n-        const lineData = {\r\n+        const barData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n+                    label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4,\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n                 },\r\n                 {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n+                    label: 'My Second dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4,\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n-            ],\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n-        const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+        const pieData = {\r\n+            labels: ['A', 'B', 'C'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'Sales',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [50, 60, 70, 80, 90, 100, 110],\r\n-                },\r\n-            ],\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        const pieData = {\r\n-            labels: ['Category A', 'Category B', 'Category C'],\r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const lineData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    data: [300, 50, 100],\r\n-                    backgroundColor: [\r\n-                        documentStyle.getPropertyValue('--primary-500'),\r\n-                        documentStyle.getPropertyValue('--primary-300'),\r\n-                        documentStyle.getPropertyValue('--primary-100'),\r\n-                    ],\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    tension: 0.4\r\n                 },\r\n-            ],\r\n+                {\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    tension: 0.4\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        setChartData({ lineData, barData, pieData });\r\n-        setFilteredData({ lineData, barData, pieData });\r\n-\r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        color: textColor,\r\n-                    },\r\n-                },\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n+\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n                 },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n             },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n-        setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n+        setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n+        });\r\n+        setChartData({\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n+        });\r\n     }, [layoutConfig]);\r\n \r\n-    const filterDataByDate = () => {\r\n-        if (firstDate && lastDate) {\r\n-            const filterDataset = (dataset, labels) => ({\r\n-                labels: labels.filter(\r\n-                    (label, index) =>\r\n-                        index >= labels.indexOf(firstDate) &&\r\n-                        index <= labels.indexOf(lastDate)\r\n-                ),\r\n-                datasets: dataset.datasets.map((dataSet) => ({\r\n-                    ...dataSet,\r\n-                    data: dataSet.data.slice(\r\n-                        dataset.labels.indexOf(firstDate),\r\n-                        dataset.labels.indexOf(lastDate) + 1\r\n-                    ),\r\n-                })),\r\n-            });\r\n-\r\n-            setFilteredData({\r\n-                lineData: filterDataset(data.lineData, data.lineData.labels),\r\n-                barData: filterDataset(data.barData, data.barData.labels),\r\n-                pieData: data.pieData, // Pie chart doesn't use date filtering\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    useEffect(() => {\r\n-        filterDataByDate();\r\n-    }, [firstDate, lastDate]);\r\n-\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n-            {/* Date Filters */}\r\n-            <div className=\"col-12\">\r\n-                <div className=\"card\">\r\n-                    <h5>Select Date Range</h5>\r\n-                    <div className=\"grid\">\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                value={firstDate}\r\n-                                onChange={(e) => setFirstDate(e.value)}\r\n-                                placeholder=\"First Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n-                            />\r\n-                        </div>\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                value={lastDate}\r\n-                                onChange={(e) => setLastDate(e.value)}\r\n-                                placeholder=\"Last Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n-                            />\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-\r\n-            {/* Charts */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={filteredData.lineData} options={options.lineOptions}></Chart>\r\n+                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n-                    <Chart type=\"bar\" data={filteredData.barData} options={options.barOptions}></Chart>\r\n+                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n             <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card\">\r\n-                    <h5>Payment Chart</h5>\r\n-                    <Chart type=\"pie\" data={filteredData.pieData} options={options.pieOptions}></Chart>\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n+                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n+                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n+                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n+                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736839137147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,266 +1,194 @@\n import { Chart } from 'primereact/chart';\r\n+import { Calendar } from 'primereact/calendar';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n+    const [filteredData, setFilteredData] = useState({});\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-        const barData = {\r\n+\r\n+        const lineData = {\r\n             labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'My First dataset',\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                    tension: 0.4,\r\n                 },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n-                }\r\n-            ]\r\n+            ],\r\n         };\r\n \r\n-        const barOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n-                    },\r\n-                    grid: {\r\n-                        display: false,\r\n-                        drawBorder: false\r\n-                    }\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'Sales',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [50, 60, 70, 80, 90, 100, 110],\r\n                 },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n+            ],\r\n         };\r\n \r\n         const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n+            labels: ['Category A', 'Category B', 'Category C'],\r\n             datasets: [\r\n                 {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n+                    data: [300, 50, 100],\r\n+                    backgroundColor: [\r\n+                        documentStyle.getPropertyValue('--primary-500'),\r\n+                        documentStyle.getPropertyValue('--primary-300'),\r\n+                        documentStyle.getPropertyValue('--primary-100'),\r\n+                    ],\r\n+                },\r\n+            ],\r\n         };\r\n \r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n+        setChartData({ lineData, barData, pieData });\r\n+        setFilteredData({ lineData, barData, pieData });\r\n \r\n-        const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4\r\n-                },\r\n-                {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n+                        color: textColor,\r\n+                    },\r\n+                },\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n+                        drawBorder: false,\r\n+                    },\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary\r\n+                        color: textColorSecondary,\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n+                        drawBorder: false,\r\n+                    },\r\n+                },\r\n+            },\r\n         };\r\n \r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n+        setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n+    }, [layoutConfig]);\r\n \r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n+    const filterData = (data, firstDate, lastDate) => {\r\n+        if (!firstDate || !lastDate || !data.labels) return data;\r\n \r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n+        const startIndex = data.labels.indexOf(firstDate);\r\n+        const endIndex = data.labels.indexOf(lastDate) + 1;\r\n \r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n+        return {\r\n+            ...data,\r\n+            labels: data.labels.slice(startIndex, endIndex),\r\n+            datasets: data.datasets.map((dataset) => ({\r\n+                ...dataset,\r\n+                data: dataset.data.slice(startIndex, endIndex),\r\n+            })),\r\n         };\r\n+    };\r\n \r\n-        setOptions({\r\n-            barOptions,\r\n-            pieOptions,\r\n-            lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n-        });\r\n-        setChartData({\r\n-            barData,\r\n-            pieData,\r\n-            lineData,\r\n-            polarData,\r\n-            radarData\r\n-        });\r\n-    }, [layoutConfig]);\r\n-\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n+            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n+                    <div className=\"grid\">\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                placeholder=\"First Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                                onChange={(e) => {\r\n+                                    setFilteredData((prev) => ({\r\n+                                        ...prev,\r\n+                                        lineData: filterData(data.lineData, e.value, prev.lineData?.lastDate),\r\n+                                    }));\r\n+                                }}\r\n+                            />\r\n+                        </div>\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                placeholder=\"Last Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                                onChange={(e) => {\r\n+                                    setFilteredData((prev) => ({\r\n+                                        ...prev,\r\n+                                        lineData: filterData(data.lineData, prev.lineData?.firstDate, e.value),\r\n+                                    }));\r\n+                                }}\r\n+                            />\r\n+                        </div>\r\n+                    </div>\r\n+                    <Chart type=\"line\" data={filteredData.lineData || data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n-                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n+                    <div className=\"grid\">\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                placeholder=\"First Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                                onChange={(e) => {\r\n+                                    setFilteredData((prev) => ({\r\n+                                        ...prev,\r\n+                                        barData: filterData(data.barData, e.value, prev.barData?.lastDate),\r\n+                                    }));\r\n+                                }}\r\n+                            />\r\n+                        </div>\r\n+                        <div className=\"col-6\">\r\n+                            <Calendar\r\n+                                placeholder=\"Last Date\"\r\n+                                dateFormat=\"MM yy\"\r\n+                                view=\"month\"\r\n+                                onChange={(e) => {\r\n+                                    setFilteredData((prev) => ({\r\n+                                        ...prev,\r\n+                                        barData: filterData(data.barData, prev.barData?.firstDate, e.value),\r\n+                                    }));\r\n+                                }}\r\n+                            />\r\n+                        </div>\r\n+                    </div>\r\n+                    <Chart type=\"bar\" data={filteredData.barData || data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+\r\n+            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n+                <div className=\"card\">\r\n+                    <h5>Payment Chart</h5>\r\n+                    {/* Pie chart does not use date filtering */}\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n-                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n-                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n-                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736839275188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n \r\n         const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            labels: ['2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'],\r\n             datasets: [\r\n                 {\r\n                     label: 'First Dataset',\r\n                     data: [65, 59, 80, 81, 56, 55, 40],\r\n@@ -29,9 +29,9 @@\n             ],\r\n         };\r\n \r\n         const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            labels: ['2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'],\r\n             datasets: [\r\n                 {\r\n                     label: 'Sales',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n@@ -89,20 +89,28 @@\n \r\n         setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n     }, [layoutConfig]);\r\n \r\n-    const filterData = (data, firstDate, lastDate) => {\r\n+    const filterDataByDate = (data, firstDate, lastDate) => {\r\n         if (!firstDate || !lastDate || !data.labels) return data;\r\n \r\n-        const startIndex = data.labels.indexOf(firstDate);\r\n-        const endIndex = data.labels.indexOf(lastDate) + 1;\r\n+        const startDate = new Date(firstDate);\r\n+        const endDate = new Date(lastDate);\r\n \r\n+        const filteredLabels = data.labels.filter((label) => {\r\n+            const labelDate = new Date(label);\r\n+            return labelDate >= startDate && labelDate <= endDate;\r\n+        });\r\n+\r\n         return {\r\n             ...data,\r\n-            labels: data.labels.slice(startIndex, endIndex),\r\n+            labels: filteredLabels,\r\n             datasets: data.datasets.map((dataset) => ({\r\n                 ...dataset,\r\n-                data: dataset.data.slice(startIndex, endIndex),\r\n+                data: dataset.data.filter((_, index) => {\r\n+                    const labelDate = new Date(data.labels[index]);\r\n+                    return labelDate >= startDate && labelDate <= endDate;\r\n+                }),\r\n             })),\r\n         };\r\n     };\r\n \r\n@@ -115,27 +123,25 @@\n                     <div className=\"grid\">\r\n                         <div className=\"col-6\">\r\n                             <Calendar\r\n                                 placeholder=\"First Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n+                                dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        lineData: filterData(data.lineData, e.value, prev.lineData?.lastDate),\r\n+                                        lineData: filterDataByDate(data.lineData, e.value, prev.lineData?.lastDate),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n                         <div className=\"col-6\">\r\n                             <Calendar\r\n                                 placeholder=\"Last Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n+                                dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        lineData: filterData(data.lineData, prev.lineData?.firstDate, e.value),\r\n+                                        lineData: filterDataByDate(data.lineData, prev.lineData?.firstDate, e.value),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n@@ -151,27 +157,25 @@\n                     <div className=\"grid\">\r\n                         <div className=\"col-6\">\r\n                             <Calendar\r\n                                 placeholder=\"First Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n+                                dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        barData: filterData(data.barData, e.value, prev.barData?.lastDate),\r\n+                                        barData: filterDataByDate(data.barData, e.value, prev.barData?.lastDate),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n                         <div className=\"col-6\">\r\n                             <Calendar\r\n                                 placeholder=\"Last Date\"\r\n-                                dateFormat=\"MM yy\"\r\n-                                view=\"month\"\r\n+                                dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        barData: filterData(data.barData, prev.barData?.firstDate, e.value),\r\n+                                        barData: filterDataByDate(data.barData, prev.barData?.firstDate, e.value),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n"
                },
                {
                    "date": 1736839445245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,13 @@\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n \r\n+        // Menyediakan data dengan format tanggal yang lengkap\r\n         const lineData = {\r\n-            labels: ['2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'],\r\n+            labels: [\r\n+                '2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'\r\n+            ],\r\n             datasets: [\r\n                 {\r\n                     label: 'First Dataset',\r\n                     data: [65, 59, 80, 81, 56, 55, 40],\r\n@@ -29,9 +32,11 @@\n             ],\r\n         };\r\n \r\n         const barData = {\r\n-            labels: ['2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'],\r\n+            labels: [\r\n+                '2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'\r\n+            ],\r\n             datasets: [\r\n                 {\r\n                     label: 'Sales',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n@@ -89,14 +94,16 @@\n \r\n         setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n     }, [layoutConfig]);\r\n \r\n+    // Fungsi untuk memfilter data berdasarkan tanggal\r\n     const filterDataByDate = (data, firstDate, lastDate) => {\r\n         if (!firstDate || !lastDate || !data.labels) return data;\r\n \r\n         const startDate = new Date(firstDate);\r\n         const endDate = new Date(lastDate);\r\n \r\n+        // Menyaring labels dan data berdasarkan tanggal\r\n         const filteredLabels = data.labels.filter((label) => {\r\n             const labelDate = new Date(label);\r\n             return labelDate >= startDate && labelDate <= endDate;\r\n         });\r\n@@ -127,9 +134,11 @@\n                                 dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        lineData: filterDataByDate(data.lineData, e.value, prev.lineData?.lastDate),\r\n+                                        lineData: filterDataByDate(\r\n+                                            data.lineData, e.value, prev.lineData?.lastDate\r\n+                                        ),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n@@ -139,9 +148,11 @@\n                                 dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        lineData: filterDataByDate(data.lineData, prev.lineData?.firstDate, e.value),\r\n+                                        lineData: filterDataByDate(\r\n+                                            data.lineData, prev.lineData?.firstDate, e.value\r\n+                                        ),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n@@ -161,9 +172,11 @@\n                                 dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        barData: filterDataByDate(data.barData, e.value, prev.barData?.lastDate),\r\n+                                        barData: filterDataByDate(\r\n+                                            data.barData, e.value, prev.barData?.lastDate\r\n+                                        ),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n@@ -173,9 +186,11 @@\n                                 dateFormat=\"dd/mm/yy\"\r\n                                 onChange={(e) => {\r\n                                     setFilteredData((prev) => ({\r\n                                         ...prev,\r\n-                                        barData: filterDataByDate(data.barData, prev.barData?.firstDate, e.value),\r\n+                                        barData: filterDataByDate(\r\n+                                            data.barData, prev.barData?.firstDate, e.value\r\n+                                        ),\r\n                                     }));\r\n                                 }}\r\n                             />\r\n                         </div>\r\n"
                },
                {
                    "date": 1736839462285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,213 +1,266 @@\n import { Chart } from 'primereact/chart';\r\n-import { Calendar } from 'primereact/calendar';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [filteredData, setFilteredData] = useState({});\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-\r\n-        // Menyediakan data dengan format tanggal yang lengkap\r\n-        const lineData = {\r\n-            labels: [\r\n-                '2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'\r\n-            ],\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n+                    label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4,\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n                 },\r\n-            ],\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        const barData = {\r\n-            labels: [\r\n-                '2025-01-01', '2025-02-01', '2025-03-01', '2025-04-01', '2025-05-01', '2025-06-01', '2025-07-01'\r\n-            ],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'Sales',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [50, 60, 70, 80, 90, 100, 110],\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n-            ],\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n         const pieData = {\r\n-            labels: ['Category A', 'Category B', 'Category C'],\r\n+            labels: ['A', 'B', 'C'],\r\n             datasets: [\r\n                 {\r\n-                    data: [300, 50, 100],\r\n-                    backgroundColor: [\r\n-                        documentStyle.getPropertyValue('--primary-500'),\r\n-                        documentStyle.getPropertyValue('--primary-300'),\r\n-                        documentStyle.getPropertyValue('--primary-100'),\r\n-                    ],\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const lineData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    tension: 0.4\r\n                 },\r\n-            ],\r\n+                {\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    tension: 0.4\r\n+                }\r\n+            ]\r\n         };\r\n \r\n-        setChartData({ lineData, barData, pieData });\r\n-        setFilteredData({ lineData, barData, pieData });\r\n-\r\n         const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n-                        color: textColor,\r\n-                    },\r\n-                },\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n+                        drawBorder: false\r\n+                    }\r\n                 },\r\n                 y: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n                         color: surfaceBorder,\r\n-                        drawBorder: false,\r\n-                    },\r\n-                },\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n+\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n             },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n         };\r\n \r\n-        setOptions({ lineOptions, barOptions: lineOptions, pieOptions: lineOptions });\r\n-    }, [layoutConfig]);\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-    // Fungsi untuk memfilter data berdasarkan tanggal\r\n-    const filterDataByDate = (data, firstDate, lastDate) => {\r\n-        if (!firstDate || !lastDate || !data.labels) return data;\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n \r\n-        const startDate = new Date(firstDate);\r\n-        const endDate = new Date(lastDate);\r\n-\r\n-        // Menyaring labels dan data berdasarkan tanggal\r\n-        const filteredLabels = data.labels.filter((label) => {\r\n-            const labelDate = new Date(label);\r\n-            return labelDate >= startDate && labelDate <= endDate;\r\n+        setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n         });\r\n+        setChartData({\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n+        });\r\n+    }, [layoutConfig]);\r\n \r\n-        return {\r\n-            ...data,\r\n-            labels: filteredLabels,\r\n-            datasets: data.datasets.map((dataset) => ({\r\n-                ...dataset,\r\n-                data: dataset.data.filter((_, index) => {\r\n-                    const labelDate = new Date(data.labels[index]);\r\n-                    return labelDate >= startDate && labelDate <= endDate;\r\n-                }),\r\n-            })),\r\n-        };\r\n-    };\r\n-\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n-            {/* Sales Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <div className=\"grid\">\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                placeholder=\"First Date\"\r\n-                                dateFormat=\"dd/mm/yy\"\r\n-                                onChange={(e) => {\r\n-                                    setFilteredData((prev) => ({\r\n-                                        ...prev,\r\n-                                        lineData: filterDataByDate(\r\n-                                            data.lineData, e.value, prev.lineData?.lastDate\r\n-                                        ),\r\n-                                    }));\r\n-                                }}\r\n-                            />\r\n-                        </div>\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                placeholder=\"Last Date\"\r\n-                                dateFormat=\"dd/mm/yy\"\r\n-                                onChange={(e) => {\r\n-                                    setFilteredData((prev) => ({\r\n-                                        ...prev,\r\n-                                        lineData: filterDataByDate(\r\n-                                            data.lineData, prev.lineData?.firstDate, e.value\r\n-                                        ),\r\n-                                    }));\r\n-                                }}\r\n-                            />\r\n-                        </div>\r\n-                    </div>\r\n-                    <Chart type=\"line\" data={filteredData.lineData || data.lineData} options={options.lineOptions}></Chart>\r\n+                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Product Best Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Product Best Chart</h5>\r\n-                    <div className=\"grid\">\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                placeholder=\"First Date\"\r\n-                                dateFormat=\"dd/mm/yy\"\r\n-                                onChange={(e) => {\r\n-                                    setFilteredData((prev) => ({\r\n-                                        ...prev,\r\n-                                        barData: filterDataByDate(\r\n-                                            data.barData, e.value, prev.barData?.lastDate\r\n-                                        ),\r\n-                                    }));\r\n-                                }}\r\n-                            />\r\n-                        </div>\r\n-                        <div className=\"col-6\">\r\n-                            <Calendar\r\n-                                placeholder=\"Last Date\"\r\n-                                dateFormat=\"dd/mm/yy\"\r\n-                                onChange={(e) => {\r\n-                                    setFilteredData((prev) => ({\r\n-                                        ...prev,\r\n-                                        barData: filterDataByDate(\r\n-                                            data.barData, prev.barData?.firstDate, e.value\r\n-                                        ),\r\n-                                    }));\r\n-                                }}\r\n-                            />\r\n-                        </div>\r\n-                    </div>\r\n-                    <Chart type=\"bar\" data={filteredData.barData || data.barData} options={options.barOptions}></Chart>\r\n+                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-\r\n-            {/* Payment Chart */}\r\n             <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card\">\r\n-                    <h5>Payment Chart</h5>\r\n-                    {/* Pie chart does not use date filtering */}\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n                     <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n+                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n+                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n+                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736839524082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,24 @@\n import { Chart } from 'primereact/chart';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n+import { Calendar } from 'primereact/calendar'; // Import Calendar for date picker\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n+    const [startDate, setStartDate] = useState(null); // State for start date\r\n+    const [endDate, setEndDate] = useState(null); // State for end date\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n+    const handleDateChange = (name, value) => {\r\n+        if (name === 'start') {\r\n+            setStartDate(value);\r\n+        } else if (name === 'end') {\r\n+            setEndDate(value);\r\n+        }\r\n+    };\r\n+\r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n@@ -29,8 +40,17 @@\n                 }\r\n             ]\r\n         };\r\n \r\n+        // Filter the chart data based on the selected date range (startDate and endDate)\r\n+        const filteredData = barData.datasets.map((dataset) => ({\r\n+            ...dataset,\r\n+            data: dataset.data.filter((_, index) => {\r\n+                const date = new Date(barData.labels[index]);\r\n+                return (!startDate || date >= startDate) && (!endDate || date <= endDate);\r\n+            }),\r\n+        }));\r\n+\r\n         const barOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n@@ -62,205 +82,44 @@\n                 }\r\n             }\r\n         };\r\n \r\n-        const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n-            datasets: [\r\n-                {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4\r\n-                },\r\n-                {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const lineOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n-\r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n         setOptions({\r\n             barOptions,\r\n-            pieOptions,\r\n-            lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n         });\r\n         setChartData({\r\n-            barData,\r\n-            pieData,\r\n-            lineData,\r\n-            polarData,\r\n-            radarData\r\n+            barData: { ...barData, datasets: filteredData },\r\n         });\r\n-    }, [layoutConfig]);\r\n+    }, [layoutConfig, startDate, endDate]); // Recalculate when the date range changes\r\n \r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card\">\r\n-                    <h5>Product Best Chart</h5>\r\n+                    <div className=\"p-d-flex p-jc-between\">\r\n+                        <span>Start Date:</span>\r\n+                        <Calendar\r\n+                            value={startDate}\r\n+                            onChange={(e) => handleDateChange('start', e.value)}\r\n+                            showIcon\r\n+                            dateFormat=\"yy-mm-dd\"\r\n+                            placeholder=\"Select start date\"\r\n+                        />\r\n+                    </div>\r\n+                    <div className=\"p-d-flex p-jc-between mt-2\">\r\n+                        <span>End Date:</span>\r\n+                        <Calendar\r\n+                            value={endDate}\r\n+                            onChange={(e) => handleDateChange('end', e.value)}\r\n+                            showIcon\r\n+                            dateFormat=\"yy-mm-dd\"\r\n+                            placeholder=\"Select end date\"\r\n+                        />\r\n+                    </div>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n-                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n-                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n-                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n-                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736839628033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n import { Chart } from 'primereact/chart';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n-import { Calendar } from 'primereact/calendar'; // Import Calendar for date picker\r\n+import { Calendar } from 'primereact/calendar';\r\n+import { Dropdown } from 'primereact/dropdown'; // For selecting granularity\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [startDate, setStartDate] = useState(null); // State for start date\r\n-    const [endDate, setEndDate] = useState(null); // State for end date\r\n+    const [startDate, setStartDate] = useState(null); // Start Date state\r\n+    const [endDate, setEndDate] = useState(null); // End Date state\r\n+    const [granularity, setGranularity] = useState('month'); // Granularity state (per day, per month, per year)\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n     const handleDateChange = (name, value) => {\r\n         if (name === 'start') {\r\n@@ -17,15 +19,20 @@\n             setEndDate(value);\r\n         }\r\n     };\r\n \r\n+    const handleGranularityChange = (e) => {\r\n+        setGranularity(e.value);\r\n+    };\r\n+\r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n+\r\n         const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            labels: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01'],\r\n             datasets: [\r\n                 {\r\n                     label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n@@ -40,14 +47,52 @@\n                 }\r\n             ]\r\n         };\r\n \r\n-        // Filter the chart data based on the selected date range (startDate and endDate)\r\n+        // Filter the chart data based on the selected granularity (day, month, year)\r\n         const filteredData = barData.datasets.map((dataset) => ({\r\n             ...dataset,\r\n             data: dataset.data.filter((_, index) => {\r\n                 const date = new Date(barData.labels[index]);\r\n-                return (!startDate || date >= startDate) && (!endDate || date <= endDate);\r\n+                \r\n+                let startDateCheck = true;\r\n+                let endDateCheck = true;\r\n+                \r\n+                if (startDate) {\r\n+                    switch (granularity) {\r\n+                        case 'day':\r\n+                            startDateCheck = date >= startDate;\r\n+                            break;\r\n+                        case 'month':\r\n+                            startDateCheck = date.getMonth() >= startDate.getMonth() && date.getFullYear() >= startDate.getFullYear();\r\n+                            break;\r\n+                        case 'year':\r\n+                            startDateCheck = date.getFullYear() >= startDate.getFullYear();\r\n+                            break;\r\n+                        default:\r\n+                            startDateCheck = true;\r\n+                            break;\r\n+                    }\r\n+                }\r\n+\r\n+                if (endDate) {\r\n+                    switch (granularity) {\r\n+                        case 'day':\r\n+                            endDateCheck = date <= endDate;\r\n+                            break;\r\n+                        case 'month':\r\n+                            endDateCheck = date.getMonth() <= endDate.getMonth() && date.getFullYear() <= endDate.getFullYear();\r\n+                            break;\r\n+                        case 'year':\r\n+                            endDateCheck = date.getFullYear() <= endDate.getFullYear();\r\n+                            break;\r\n+                        default:\r\n+                            endDateCheck = true;\r\n+                            break;\r\n+                    }\r\n+                }\r\n+\r\n+                return startDateCheck && endDateCheck;\r\n             }),\r\n         }));\r\n \r\n         const barOptions = {\r\n@@ -88,10 +133,16 @@\n         });\r\n         setChartData({\r\n             barData: { ...barData, datasets: filteredData },\r\n         });\r\n-    }, [layoutConfig, startDate, endDate]); // Recalculate when the date range changes\r\n+    }, [layoutConfig, startDate, endDate, granularity]); // Recalculate when the date range or granularity changes\r\n \r\n+    const granularityOptions = [\r\n+        { label: 'Per Day', value: 'day' },\r\n+        { label: 'Per Month', value: 'month' },\r\n+        { label: 'Per Year', value: 'year' }\r\n+    ];\r\n+\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n@@ -115,8 +166,16 @@\n                             dateFormat=\"yy-mm-dd\"\r\n                             placeholder=\"Select end date\"\r\n                         />\r\n                     </div>\r\n+                    <div className=\"mt-3\">\r\n+                        <Dropdown\r\n+                            value={granularity}\r\n+                            options={granularityOptions}\r\n+                            onChange={handleGranularityChange}\r\n+                            placeholder=\"Select Granularity\"\r\n+                        />\r\n+                    </div>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n"
                },
                {
                    "date": 1736840220942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,15 @@\n                 }\r\n             ]\r\n         };\r\n \r\n+        // Calculate the end date if it's not set, assuming a year duration from the start date\r\n+        if (startDate && !endDate) {\r\n+            const calculatedEndDate = new Date(startDate);\r\n+            calculatedEndDate.setFullYear(calculatedEndDate.getFullYear() + 1);\r\n+            setEndDate(calculatedEndDate); // Automatically set end date to one year later\r\n+        }\r\n+\r\n         // Filter the chart data based on the selected granularity (day, month, year)\r\n         const filteredData = barData.datasets.map((dataset) => ({\r\n             ...dataset,\r\n             data: dataset.data.filter((_, index) => {\r\n"
                },
                {
                    "date": 1736840276977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n \r\n         const barData = {\r\n-            labels: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01'],\r\n+            labels: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01', '2024-08-01', '2024-09-01', '2024-10-01', '2024-11-01', '2024-12-01'],\r\n             datasets: [\r\n                 {\r\n                     label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n"
                },
                {
                    "date": 1736840373446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,15 +36,15 @@\n                 {\r\n                     label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                    data: [65, 59, 80, 81, 56, 55, 40, 70, 50, 60, 90, 100] // Adjusted data length to match labels\r\n                 },\r\n                 {\r\n                     label: 'My Second dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                    data: [28, 48, 40, 19, 86, 27, 90, 30, 40, 60, 75, 80] // Adjusted data length to match labels\r\n                 }\r\n             ]\r\n         };\r\n \r\n@@ -59,19 +59,19 @@\n         const filteredData = barData.datasets.map((dataset) => ({\r\n             ...dataset,\r\n             data: dataset.data.filter((_, index) => {\r\n                 const date = new Date(barData.labels[index]);\r\n-                \r\n+\r\n                 let startDateCheck = true;\r\n                 let endDateCheck = true;\r\n-                \r\n+\r\n                 if (startDate) {\r\n                     switch (granularity) {\r\n                         case 'day':\r\n                             startDateCheck = date >= startDate;\r\n                             break;\r\n                         case 'month':\r\n-                            startDateCheck = date.getMonth() >= startDate.getMonth() && date.getFullYear() >= startDate.getFullYear();\r\n+                            startDateCheck = (date.getMonth() >= startDate.getMonth() && date.getFullYear() >= startDate.getFullYear());\r\n                             break;\r\n                         case 'year':\r\n                             startDateCheck = date.getFullYear() >= startDate.getFullYear();\r\n                             break;\r\n@@ -86,9 +86,9 @@\n                         case 'day':\r\n                             endDateCheck = date <= endDate;\r\n                             break;\r\n                         case 'month':\r\n-                            endDateCheck = date.getMonth() <= endDate.getMonth() && date.getFullYear() <= endDate.getFullYear();\r\n+                            endDateCheck = (date.getMonth() <= endDate.getMonth() && date.getFullYear() <= endDate.getFullYear());\r\n                             break;\r\n                         case 'year':\r\n                             endDateCheck = date.getFullYear() <= endDate.getFullYear();\r\n                             break;\r\n"
                },
                {
                    "date": 1736840577879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,39 +23,55 @@\n     const handleGranularityChange = (e) => {\r\n         setGranularity(e.value);\r\n     };\r\n \r\n+    // Utility function to generate date labels\r\n+    const generateLabels = (startDate, endDate, granularity) => {\r\n+        const labels = [];\r\n+        const currentDate = new Date(startDate);\r\n+        while (currentDate <= endDate) {\r\n+            const label = new Date(currentDate);\r\n+            if (granularity === 'day') {\r\n+                labels.push(label.toISOString().split('T')[0]); // Format as YYYY-MM-DD\r\n+                currentDate.setDate(currentDate.getDate() + 1); // Move to next day\r\n+            } else if (granularity === 'month') {\r\n+                labels.push(`${label.getFullYear()}-${(label.getMonth() + 1).toString().padStart(2, '0')}-01`); // Format as YYYY-MM-01\r\n+                currentDate.setMonth(currentDate.getMonth() + 1); // Move to next month\r\n+            } else if (granularity === 'year') {\r\n+                labels.push(`${label.getFullYear()}-01-01`); // Format as YYYY-01-01\r\n+                currentDate.setFullYear(currentDate.getFullYear() + 1); // Move to next year\r\n+            }\r\n+        }\r\n+        return labels;\r\n+    };\r\n+\r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n \r\n+        // Generate labels dynamically based on the start date, end date, and granularity\r\n+        const labels = generateLabels(startDate, endDate, granularity);\r\n+\r\n         const barData = {\r\n-            labels: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01', '2024-08-01', '2024-09-01', '2024-10-01', '2024-11-01', '2024-12-01'],\r\n+            labels, // Use the generated labels\r\n             datasets: [\r\n                 {\r\n                     label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40, 70, 50, 60, 90, 100] // Adjusted data length to match labels\r\n+                    data: Array(labels.length).fill(Math.floor(Math.random() * 100)) // Random data, replace with your actual data logic\r\n                 },\r\n                 {\r\n                     label: 'My Second dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90, 30, 40, 60, 75, 80] // Adjusted data length to match labels\r\n+                    data: Array(labels.length).fill(Math.floor(Math.random() * 100)) // Random data, replace with your actual data logic\r\n                 }\r\n             ]\r\n         };\r\n \r\n-        // Calculate the end date if it's not set, assuming a year duration from the start date\r\n-        if (startDate && !endDate) {\r\n-            const calculatedEndDate = new Date(startDate);\r\n-            calculatedEndDate.setFullYear(calculatedEndDate.getFullYear() + 1);\r\n-            setEndDate(calculatedEndDate); // Automatically set end date to one year later\r\n-        }\r\n-\r\n         // Filter the chart data based on the selected granularity (day, month, year)\r\n         const filteredData = barData.datasets.map((dataset) => ({\r\n             ...dataset,\r\n             data: dataset.data.filter((_, index) => {\r\n"
                },
                {
                    "date": 1736841157643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,114 @@\n import { Chart } from 'primereact/chart';\r\n import React, { useContext, useEffect, useState } from 'react';\r\n import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n-import { Calendar } from 'primereact/calendar';\r\n-import { Dropdown } from 'primereact/dropdown'; // For selecting granularity\r\n \r\n const ChartDemo = () => {\r\n     const [options, setOptions] = useState({});\r\n     const [data, setChartData] = useState({});\r\n-    const [startDate, setStartDate] = useState(null); // Start Date state\r\n-    const [endDate, setEndDate] = useState(null); // End Date state\r\n-    const [granularity, setGranularity] = useState('month'); // Granularity state (per day, per month, per year)\r\n     const { layoutConfig } = useContext(LayoutContext);\r\n \r\n-    const handleDateChange = (name, value) => {\r\n-        if (name === 'start') {\r\n-            setStartDate(value);\r\n-        } else if (name === 'end') {\r\n-            setEndDate(value);\r\n-        }\r\n-    };\r\n-\r\n-    const handleGranularityChange = (e) => {\r\n-        setGranularity(e.value);\r\n-    };\r\n-\r\n-    // Utility function to generate date labels\r\n-    const generateLabels = (startDate, endDate, granularity) => {\r\n-        const labels = [];\r\n-        const currentDate = new Date(startDate);\r\n-        while (currentDate <= endDate) {\r\n-            const label = new Date(currentDate);\r\n-            if (granularity === 'day') {\r\n-                labels.push(label.toISOString().split('T')[0]); // Format as YYYY-MM-DD\r\n-                currentDate.setDate(currentDate.getDate() + 1); // Move to next day\r\n-            } else if (granularity === 'month') {\r\n-                labels.push(`${label.getFullYear()}-${(label.getMonth() + 1).toString().padStart(2, '0')}-01`); // Format as YYYY-MM-01\r\n-                currentDate.setMonth(currentDate.getMonth() + 1); // Move to next month\r\n-            } else if (granularity === 'year') {\r\n-                labels.push(`${label.getFullYear()}-01-01`); // Format as YYYY-01-01\r\n-                currentDate.setFullYear(currentDate.getFullYear() + 1); // Move to next year\r\n-            }\r\n-        }\r\n-        return labels;\r\n-    };\r\n-\r\n     useEffect(() => {\r\n         const documentStyle = getComputedStyle(document.documentElement);\r\n         const textColor = documentStyle.getPropertyValue('--text-color');\r\n         const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n         const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-\r\n-        // Generate labels dynamically based on the start date, end date, and granularity\r\n-        const labels = generateLabels(startDate, endDate, granularity);\r\n-\r\n         const barData = {\r\n-            labels, // Use the generated labels\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n             datasets: [\r\n                 {\r\n                     label: 'My First dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: Array(labels.length).fill(Math.floor(Math.random() * 100)) // Random data, replace with your actual data logic\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n                 },\r\n                 {\r\n                     label: 'My Second dataset',\r\n                     backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                     borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: Array(labels.length).fill(Math.floor(Math.random() * 100)) // Random data, replace with your actual data logic\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n                 }\r\n             ]\r\n         };\r\n \r\n-        // Filter the chart data based on the selected granularity (day, month, year)\r\n-        const filteredData = barData.datasets.map((dataset) => ({\r\n-            ...dataset,\r\n-            data: dataset.data.filter((_, index) => {\r\n-                const date = new Date(barData.labels[index]);\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n \r\n-                let startDateCheck = true;\r\n-                let endDateCheck = true;\r\n+        const pieData = {\r\n+            labels: ['A', 'B', 'C'],\r\n+            datasets: [\r\n+                {\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-                if (startDate) {\r\n-                    switch (granularity) {\r\n-                        case 'day':\r\n-                            startDateCheck = date >= startDate;\r\n-                            break;\r\n-                        case 'month':\r\n-                            startDateCheck = (date.getMonth() >= startDate.getMonth() && date.getFullYear() >= startDate.getFullYear());\r\n-                            break;\r\n-                        case 'year':\r\n-                            startDateCheck = date.getFullYear() >= startDate.getFullYear();\r\n-                            break;\r\n-                        default:\r\n-                            startDateCheck = true;\r\n-                            break;\r\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n                     }\r\n                 }\r\n+            }\r\n+        };\r\n \r\n-                if (endDate) {\r\n-                    switch (granularity) {\r\n-                        case 'day':\r\n-                            endDateCheck = date <= endDate;\r\n-                            break;\r\n-                        case 'month':\r\n-                            endDateCheck = (date.getMonth() <= endDate.getMonth() && date.getFullYear() <= endDate.getFullYear());\r\n-                            break;\r\n-                        case 'year':\r\n-                            endDateCheck = date.getFullYear() <= endDate.getFullYear();\r\n-                            break;\r\n-                        default:\r\n-                            endDateCheck = true;\r\n-                            break;\r\n-                    }\r\n+        const lineData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    tension: 0.4\r\n+                },\r\n+                {\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    tension: 0.4\r\n                 }\r\n+            ]\r\n+        };\r\n \r\n-                return startDateCheck && endDateCheck;\r\n-            }),\r\n-        }));\r\n-\r\n-        const barOptions = {\r\n+        const lineOptions = {\r\n             plugins: {\r\n                 legend: {\r\n                     labels: {\r\n                         fontColor: textColor\r\n@@ -128,15 +117,12 @@\n             },\r\n             scales: {\r\n                 x: {\r\n                     ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n+                        color: textColorSecondary\r\n                     },\r\n                     grid: {\r\n-                        display: false,\r\n+                        color: surfaceBorder,\r\n                         drawBorder: false\r\n                     }\r\n                 },\r\n                 y: {\r\n@@ -150,58 +136,131 @@\n                 }\r\n             }\r\n         };\r\n \r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n+\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n         setOptions({\r\n             barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n         });\r\n         setChartData({\r\n-            barData: { ...barData, datasets: filteredData },\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n         });\r\n-    }, [layoutConfig, startDate, endDate, granularity]); // Recalculate when the date range or granularity changes\r\n+    }, [layoutConfig]);\r\n \r\n-    const granularityOptions = [\r\n-        { label: 'Per Day', value: 'day' },\r\n-        { label: 'Per Month', value: 'month' },\r\n-        { label: 'Per Year', value: 'year' }\r\n-    ];\r\n-\r\n     return (\r\n         <div className=\"grid p-fluid\">\r\n             <div className=\"col-12 xl:col-6\">\r\n                 <div className=\"card\">\r\n                     <h5>Sales Chart</h5>\r\n-                    <div className=\"p-d-flex p-jc-between\">\r\n-                        <span>Start Date:</span>\r\n-                        <Calendar\r\n-                            value={startDate}\r\n-                            onChange={(e) => handleDateChange('start', e.value)}\r\n-                            showIcon\r\n-                            dateFormat=\"yy-mm-dd\"\r\n-                            placeholder=\"Select start date\"\r\n-                        />\r\n-                    </div>\r\n-                    <div className=\"p-d-flex p-jc-between mt-2\">\r\n-                        <span>End Date:</span>\r\n-                        <Calendar\r\n-                            value={endDate}\r\n-                            onChange={(e) => handleDateChange('end', e.value)}\r\n-                            showIcon\r\n-                            dateFormat=\"yy-mm-dd\"\r\n-                            placeholder=\"Select end date\"\r\n-                        />\r\n-                    </div>\r\n-                    <div className=\"mt-3\">\r\n-                        <Dropdown\r\n-                            value={granularity}\r\n-                            options={granularityOptions}\r\n-                            onChange={handleGranularityChange}\r\n-                            placeholder=\"Select Granularity\"\r\n-                        />\r\n-                    </div>\r\n+                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card\">\r\n+                    <h5>Product Best Chart</h5>\r\n                     <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n                 </div>\r\n             </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n+                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n+                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n+                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n+                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1736841427846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,267 +1,50 @@\n-import { Chart } from 'primereact/chart';\r\n-import React, { useContext, useEffect, useState } from 'react';\r\n-import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n+import React, { useState, useEffect } from 'react';\r\n+import ReactTable from 'react-table';\r\n \r\n-const ChartDemo = () => {\r\n-    const [options, setOptions] = useState({});\r\n-    const [data, setChartData] = useState({});\r\n-    const { layoutConfig } = useContext(LayoutContext);\r\n+function ReportData() {\r\n+  const [data, setData] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n \r\n-    useEffect(() => {\r\n-        const documentStyle = getComputedStyle(document.documentElement);\r\n-        const textColor = documentStyle.getPropertyValue('--text-color');\r\n-        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n-        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n-        const barData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    data: [65, 59, 80, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    data: [28, 48, 40, 19, 86, 27, 90]\r\n-                }\r\n-            ]\r\n-        };\r\n+  useEffect(() => {\r\n+    // Panggil API untuk mendapatkan data\r\n+    fetch('https://example.com/api/data')\r\n+      .then(response => response.json())\r\n+      .then(data => {\r\n+        setData(data);\r\n+        setLoading(false);\r\n+      })\r\n+      .catch(error => console.error(error));\r\n+  }, []);\r\n \r\n-        const barOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary,\r\n-                        font: {\r\n-                            weight: 500\r\n-                        }\r\n-                    },\r\n-                    grid: {\r\n-                        display: false,\r\n-                        drawBorder: false\r\n-                    }\r\n-                },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n+  const columns = [\r\n+    {\r\n+      Header: 'Nama',\r\n+      accessor: 'nama'\r\n+    },\r\n+    {\r\n+      Header: 'Alamat',\r\n+      accessor: 'alamat'\r\n+    },\r\n+    {\r\n+      Header: 'Telepon',\r\n+      accessor: 'telepon'\r\n+    }\r\n+  ];\r\n \r\n-        const pieData = {\r\n-            labels: ['A', 'B', 'C'],\r\n-            datasets: [\r\n-                {\r\n-                    data: [540, 325, 702],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n-                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n-                }\r\n-            ]\r\n-        };\r\n+  return (\r\n+    <div>\r\n+      {loading ? (\r\n+        <p>Loading...</p>\r\n+      ) : (\r\n+        <ReactTable\r\n+          data={data}\r\n+          columns={columns}\r\n+          defaultPageSize={10}\r\n+          className=\"table\"\r\n+        />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\r\n \r\n-        const pieOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        usePointStyle: true,\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const lineData = {\r\n-            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'First Dataset',\r\n-                    data: [65, 59, 80, 81, 56, 55, 40],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n-                    tension: 0.4\r\n-                },\r\n-                {\r\n-                    label: 'Second Dataset',\r\n-                    data: [28, 48, 40, 19, 86, 27, 90],\r\n-                    fill: false,\r\n-                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n-                    tension: 0.4\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const lineOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                x: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                },\r\n-                y: {\r\n-                    ticks: {\r\n-                        color: textColorSecondary\r\n-                    },\r\n-                    grid: {\r\n-                        color: surfaceBorder,\r\n-                        drawBorder: false\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const polarData = {\r\n-            datasets: [\r\n-                {\r\n-                    data: [11, 16, 7, 3],\r\n-                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n-                    label: 'My dataset'\r\n-                }\r\n-            ],\r\n-            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n-        };\r\n-\r\n-        const polarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        color: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: surfaceBorder\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        const radarData = {\r\n-            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n-            datasets: [\r\n-                {\r\n-                    label: 'My First dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n-                    data: [65, 59, 90, 81, 56, 55, 40]\r\n-                },\r\n-                {\r\n-                    label: 'My Second dataset',\r\n-                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    pointHoverBackgroundColor: textColor,\r\n-                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n-                    data: [28, 48, 40, 19, 96, 27, 100]\r\n-                }\r\n-            ]\r\n-        };\r\n-\r\n-        const radarOptions = {\r\n-            plugins: {\r\n-                legend: {\r\n-                    labels: {\r\n-                        fontColor: textColor\r\n-                    }\r\n-                }\r\n-            },\r\n-            scales: {\r\n-                r: {\r\n-                    grid: {\r\n-                        color: textColorSecondary\r\n-                    }\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        setOptions({\r\n-            barOptions,\r\n-            pieOptions,\r\n-            lineOptions,\r\n-            polarOptions,\r\n-            radarOptions\r\n-        });\r\n-        setChartData({\r\n-            barData,\r\n-            pieData,\r\n-            lineData,\r\n-            polarData,\r\n-            radarData\r\n-        });\r\n-    }, [layoutConfig]);\r\n-\r\n-    return (\r\n-        <div className=\"grid p-fluid\">\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card\">\r\n-                    <h5>Sales Chart</h5>\r\n-                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card\">\r\n-                    <h5>Product Best Chart</h5>\r\n-                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n-                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n-                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n-                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-            <div className=\"col-12 xl:col-6\">\r\n-                <div className=\"card flex flex-column align-items-center\">\r\n-                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n-                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default ChartDemo;\r\n+export default ReportData;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736841539118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,267 @@\n-import React, { useState, useEffect } from 'react';\r\n-import ReactTable from 'react-table';\r\n+import { Chart } from 'primereact/chart';\r\n+import React, { useContext, useEffect, useState } from 'react';\r\n+import { LayoutContext } from '../../../layout/context/layoutcontext';\r\n \r\n-function ReportData() {\r\n-  const [data, setData] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+const ChartDemo = () => {\r\n+    const [options, setOptions] = useState({});\r\n+    const [data, setChartData] = useState({});\r\n+    const { layoutConfig } = useContext(LayoutContext);\r\n \r\n-  useEffect(() => {\r\n-    // Panggil API untuk mendapatkan data\r\n-    fetch('https://example.com/api/data')\r\n-      .then(response => response.json())\r\n-      .then(data => {\r\n-        setData(data);\r\n-        setLoading(false);\r\n-      })\r\n-      .catch(error => console.error(error));\r\n-  }, []);\r\n+    useEffect(() => {\r\n+        const documentStyle = getComputedStyle(document.documentElement);\r\n+        const textColor = documentStyle.getPropertyValue('--text-color');\r\n+        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n+        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n+        const barData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    data: [65, 59, 80, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    data: [28, 48, 40, 19, 86, 27, 90]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-  const columns = [\r\n-    {\r\n-      Header: 'Nama',\r\n\\ No newline at end of file\n-      accessor: 'nama'\r\n-    },\r\n-    {\r\n-      Header: 'Alamat',\r\n-      accessor: 'alamat'\r\n-    },\r\n-    {\r\n-      Header: 'Telepon',\r\n-      accessor: 'telepon'\r\n-    }\r\n-  ];\r\n+        const barOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary,\r\n+                        font: {\r\n+                            weight: 500\r\n+                        }\r\n+                    },\r\n+                    grid: {\r\n+                        display: false,\r\n+                        drawBorder: false\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n \r\n-  return (\r\n-    <div>\r\n-      {loading ? (\r\n-        <p>Loading...</p>\r\n-      ) : (\r\n-        <ReactTable\r\n-          data={data}\r\n-          columns={columns}\r\n-          defaultPageSize={10}\r\n-          className=\"table\"\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\r\n+        const pieData = {\r\n+            labels: ['A', 'B', 'C'],\r\n+            datasets: [\r\n+                {\r\n+                    data: [540, 325, 702],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500')],\r\n+                    hoverBackgroundColor: [documentStyle.getPropertyValue('--indigo-400'), documentStyle.getPropertyValue('--purple-400'), documentStyle.getPropertyValue('--teal-400')]\r\n+                }\r\n+            ]\r\n+        };\r\n \r\n-export default ReportData;\n+        const pieOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        usePointStyle: true,\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const lineData = {\r\n+            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'First Dataset',\r\n+                    data: [65, 59, 80, 81, 56, 55, 40],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n+                    tension: 0.4\r\n+                },\r\n+                {\r\n+                    label: 'Second Dataset',\r\n+                    data: [28, 48, 40, 19, 86, 27, 90],\r\n+                    fill: false,\r\n+                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n+                    tension: 0.4\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const lineOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                x: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                },\r\n+                y: {\r\n+                    ticks: {\r\n+                        color: textColorSecondary\r\n+                    },\r\n+                    grid: {\r\n+                        color: surfaceBorder,\r\n+                        drawBorder: false\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const polarData = {\r\n+            datasets: [\r\n+                {\r\n+                    data: [11, 16, 7, 3],\r\n+                    backgroundColor: [documentStyle.getPropertyValue('--indigo-500'), documentStyle.getPropertyValue('--purple-500'), documentStyle.getPropertyValue('--teal-500'), documentStyle.getPropertyValue('--orange-500')],\r\n+                    label: 'My dataset'\r\n+                }\r\n+            ],\r\n+            labels: ['Indigo', 'Purple', 'Teal', 'Orange']\r\n+        };\r\n+\r\n+        const polarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        color: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: surfaceBorder\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        const radarData = {\r\n+            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\r\n+            datasets: [\r\n+                {\r\n+                    label: 'My First dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--indigo-400'),\r\n+                    data: [65, 59, 90, 81, 56, 55, 40]\r\n+                },\r\n+                {\r\n+                    label: 'My Second dataset',\r\n+                    borderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBackgroundColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    pointHoverBackgroundColor: textColor,\r\n+                    pointHoverBorderColor: documentStyle.getPropertyValue('--purple-400'),\r\n+                    data: [28, 48, 40, 19, 96, 27, 100]\r\n+                }\r\n+            ]\r\n+        };\r\n+\r\n+        const radarOptions = {\r\n+            plugins: {\r\n+                legend: {\r\n+                    labels: {\r\n+                        fontColor: textColor\r\n+                    }\r\n+                }\r\n+            },\r\n+            scales: {\r\n+                r: {\r\n+                    grid: {\r\n+                        color: textColorSecondary\r\n+                    }\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        setOptions({\r\n+            barOptions,\r\n+            pieOptions,\r\n+            lineOptions,\r\n+            polarOptions,\r\n+            radarOptions\r\n+        });\r\n+        setChartData({\r\n+            barData,\r\n+            pieData,\r\n+            lineData,\r\n+            polarData,\r\n+            radarData\r\n+        });\r\n+    }, [layoutConfig]);\r\n+\r\n+    return (\r\n+        <div className=\"grid p-fluid\">\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card\">\r\n+                    <h5>Sales Chart</h5>\r\n+                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card\">\r\n+                    <h5>Product Best Chart</h5>\r\n+                    <Chart type=\"bar\" data={data.barData} options={options.barOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Payment Chart</h5>\r\n+                    <Chart type=\"pie\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Doughnut Chart</h5>\r\n+                    <Chart type=\"doughnut\" data={data.pieData} options={options.pieOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Merk Type Chart</h5>\r\n+                    <Chart type=\"polarArea\" data={data.polarData} options={options.polarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+            <div className=\"col-12 xl:col-6\">\r\n+                <div className=\"card flex flex-column align-items-center\">\r\n+                    <h5 className=\"text-left w-full\">Radar Chart</h5>\r\n+                    <Chart type=\"radar\" data={data.radarData} options={options.radarOptions}></Chart>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default ChartDemo;\r\n"
                }
            ],
            "date": 1736833920220,
            "name": "Commit-0",
            "content": "import { Chart } from 'primereact/chart';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { LayoutContext } from '../../../layout/context/layoutcontext';\r\n\r\nconst ChartDemo = () => {\r\n    const [options, setOptions] = useState({});\r\n    const [data, setChartData] = useState({});\r\n    const { layoutConfig } = useContext(LayoutContext);\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n\r\n    const filterDataByDate = (originalData, labels) => {\r\n        if (!startDate || !endDate) {\r\n            return { filteredData: originalData, filteredLabels: labels };\r\n        }\r\n\r\n        const start = new Date(startDate);\r\n        const end = new Date(endDate);\r\n\r\n        const filteredData = originalData.filter((_, index) => {\r\n            const currentDate = new Date(labels[index]);\r\n            return currentDate >= start && currentDate <= end;\r\n        });\r\n\r\n        const filteredLabels = labels.filter((label) => {\r\n            const currentDate = new Date(label);\r\n            return currentDate >= start && currentDate <= end;\r\n        });\r\n\r\n        return { filteredData, filteredLabels };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const documentStyle = getComputedStyle(document.documentElement);\r\n        const textColor = documentStyle.getPropertyValue('--text-color');\r\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\r\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\r\n\r\n        const labels = ['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01', '2023-05-01', '2023-06-01', '2023-07-01'];\r\n        const dataset1 = [65, 59, 80, 81, 56, 55, 40];\r\n        const dataset2 = [28, 48, 40, 19, 86, 27, 90];\r\n\r\n        const { filteredData: filteredDataset1, filteredLabels } = filterDataByDate(dataset1, labels);\r\n        const { filteredData: filteredDataset2 } = filterDataByDate(dataset2, labels);\r\n\r\n        const lineData = {\r\n            labels: filteredLabels,\r\n            datasets: [\r\n                {\r\n                    label: 'First Dataset',\r\n                    data: filteredDataset1,\r\n                    fill: false,\r\n                    backgroundColor: documentStyle.getPropertyValue('--primary-500'),\r\n                    borderColor: documentStyle.getPropertyValue('--primary-500'),\r\n                    tension: 0.4\r\n                },\r\n                {\r\n                    label: 'Second Dataset',\r\n                    data: filteredDataset2,\r\n                    fill: false,\r\n                    backgroundColor: documentStyle.getPropertyValue('--primary-200'),\r\n                    borderColor: documentStyle.getPropertyValue('--primary-200'),\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        };\r\n\r\n        const lineOptions = {\r\n            plugins: {\r\n                legend: {\r\n                    labels: {\r\n                        fontColor: textColor\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    ticks: {\r\n                        color: textColorSecondary\r\n                    },\r\n                    grid: {\r\n                        color: surfaceBorder,\r\n                        drawBorder: false\r\n                    }\r\n                },\r\n                y: {\r\n                    ticks: {\r\n                        color: textColorSecondary\r\n                    },\r\n                    grid: {\r\n                        color: surfaceBorder,\r\n                        drawBorder: false\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        setOptions({ lineOptions });\r\n        setChartData({ lineData });\r\n    }, [layoutConfig, startDate, endDate]);\r\n\r\n    return (\r\n        <div className=\"grid p-fluid\">\r\n            <div className=\"col-12\">\r\n                <div className=\"card\">\r\n                    <h5>Select Date Range</h5>\r\n                    <div className=\"grid\">\r\n                        <div className=\"col-6\">\r\n                            <label htmlFor=\"startDate\">Start Date:</label>\r\n                            <input\r\n                                id=\"startDate\"\r\n                                type=\"date\"\r\n                                value={startDate}\r\n                                onChange={(e) => setStartDate(e.target.value)}\r\n                                className=\"p-inputtext p-component\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <label htmlFor=\"endDate\">End Date:</label>\r\n                            <input\r\n                                id=\"endDate\"\r\n                                type=\"date\"\r\n                                value={endDate}\r\n                                onChange={(e) => setEndDate(e.target.value)}\r\n                                className=\"p-inputtext p-component\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12\">\r\n                <div className=\"card\">\r\n                    <h5>Filtered Sales Chart</h5>\r\n                    <Chart type=\"line\" data={data.lineData} options={options.lineOptions}></Chart>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDemo;\r\n"
        }
    ]
}