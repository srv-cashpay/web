{
    "sourceFile": "pages/pages/unit/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1736825596254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736825637217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,23 +73,23 @@\n         return Promise.reject(error);\r\n     }\r\n );\r\n \r\n-// Fungsi untuk mengambil data Merk\r\n-export const fetchMerkData = async (pagination = { limit: 10, page: 0 }) => {\r\n+// Fungsi untuk mengambil data Unit\r\n+export const fetchUnitData = async (pagination = { limit: 10, page: 0 }) => {\r\n     try {\r\n         const response = await axiosInstance.get('/merchant/unit/pagination', {\r\n             params: pagination,\r\n         });\r\n         return response.data.rows; // Asumsikan data ada di `rows`\r\n     } catch (error) {\r\n-        console.error('Error fetching Merk data:', error);\r\n+        console.error('Error fetching Unit data:', error);\r\n         throw error;\r\n     }\r\n };\r\n \r\n // Fungsi untuk mengambil data produk\r\n-export const fetchMerks = async (paginationData) => {\r\n+export const fetchUnits = async (paginationData) => {\r\n     try {\r\n         const response = await axiosInstance.get('/merchant/unit/pagination', {\r\n             params: paginationData,\r\n         });\r\n@@ -100,9 +100,9 @@\n     }\r\n };\r\n \r\n // Fungsi untuk membuat produk baru\r\n-export const createMerk = async (unit) => {\r\n+export const createUnit = async (unit) => {\r\n     try {\r\n         const response = await axiosInstance.post('/merchant/unit/create', unit);\r\n         return response.data; // Respons data\r\n     } catch (error) {\r\n@@ -111,9 +111,9 @@\n     }\r\n };\r\n \r\n // Fungsi untuk menghapus produk berdasarkan ID\r\n-export const deleteMerk = async (id) => {\r\n+export const deleteUnit = async (id) => {\r\n     try {\r\n         await axiosInstance.delete(`/merchant/unit/${id}`);\r\n     } catch (error) {\r\n         console.error('Failed to delete unit:', error);\r\n@@ -121,21 +121,21 @@\n     }\r\n };\r\n \r\n // Fungsi untuk menghapus produk secara bulk\r\n-export const bulkDeleteMerks = async (selectedMerkIds) => {\r\n+export const bulkDeleteUnits = async (selectedUnitIds) => {\r\n     try {\r\n         await axiosInstance.delete('/merchant/unit/bulk-delete', {\r\n-            data: { id: selectedMerkIds },\r\n+            data: { id: selectedUnitIds },\r\n         });\r\n     } catch (error) {\r\n         console.error('Failed to delete selected units:', error);\r\n         throw error;\r\n     }\r\n };\r\n \r\n // Fungsi untuk memperbarui data produk\r\n-export const updateExistingMerk = async (unit) => {\r\n+export const updateExistingUnit = async (unit) => {\r\n     try {\r\n         const response = await axiosInstance.put(`/merchant/unit/update/${unit.id}`, {\r\n             unit_name: unit.unit_name,\r\n             description: unit.description,\r\n"
                },
                {
                    "date": 1736825699195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,10 +137,8 @@\n export const updateExistingUnit = async (unit) => {\r\n     try {\r\n         const response = await axiosInstance.put(`/merchant/unit/update/${unit.id}`, {\r\n             unit_name: unit.unit_name,\r\n-            description: unit.description,\r\n-            status: unit.status,\r\n         });\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error('Error updating unit:', error);\r\n"
                },
                {
                    "date": 1737434197246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,25 +10,26 @@\n });\r\n \r\n // Fungsi untuk mendapatkan token dari cookies\r\n const getTokenFromCookie = () => Cookies.get('token');\r\n+const getRefreshTokenFromCookie = () => Cookies.get('refresh_token');\r\n \r\n // Fungsi untuk merefresh token\r\n const refreshAuthToken = async () => {\r\n-    const refreshToken = Cookies.get('refresh_token'); // Ambil refresh token dari cookies\r\n+    const refreshToken = getRefreshTokenFromCookie(); \r\n     if (!refreshToken) throw new Error('No refresh token available');\r\n \r\n     try {\r\n         const response = await axios.post(\r\n             'http://192.168.14.248:2356/api/auth/refresh',\r\n             { refresh_token: refreshToken },\r\n             {\r\n                 headers: {\r\n-                    'x-api-key': '3f=Pr#g1@RU-nw=30', // Tambahkan header x-api-key\r\n+                    'x-api-key': '3f=Pr#g1@RU-nw=30', // Header tambahan jika diperlukan\r\n+                    'Authorization': `Bearer ${refreshToken}`\r\n                 },\r\n             }\r\n         );\r\n-        \r\n         if (response.data && response.data.data.access_token) {\r\n             const newToken = response.data.data.access_token;\r\n             Cookies.set('token', newToken); // Simpan token baru di cookies\r\n             return newToken; // Kembalikan token baru\r\n"
                }
            ],
            "date": 1736825596254,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\n// Membuat instance Axios\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://192.168.14.248:2358/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Fungsi untuk mendapatkan token dari cookies\r\nconst getTokenFromCookie = () => Cookies.get('token');\r\n\r\n// Fungsi untuk merefresh token\r\nconst refreshAuthToken = async () => {\r\n    const refreshToken = Cookies.get('refresh_token'); // Ambil refresh token dari cookies\r\n    if (!refreshToken) throw new Error('No refresh token available');\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            'http://192.168.14.248:2356/api/auth/refresh',\r\n            { refresh_token: refreshToken },\r\n            {\r\n                headers: {\r\n                    'x-api-key': '3f=Pr#g1@RU-nw=30', // Tambahkan header x-api-key\r\n                },\r\n            }\r\n        );\r\n        \r\n        if (response.data && response.data.data.access_token) {\r\n            const newToken = response.data.data.access_token;\r\n            Cookies.set('token', newToken); // Simpan token baru di cookies\r\n            return newToken; // Kembalikan token baru\r\n        } else {\r\n            throw new Error('Invalid response structure');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error refreshing token:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// Interceptor untuk menambahkan token ke setiap request\r\naxiosInstance.interceptors.request.use(\r\n    async (config) => {\r\n        const token = getTokenFromCookie();\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor untuk menangani error respons\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.warn('Token expired. Attempting to refresh...');\r\n            try {\r\n                const newToken = await refreshAuthToken();\r\n                error.config.headers.Authorization = `Bearer ${newToken}`;\r\n                return axiosInstance.request(error.config); // Retry original request\r\n            } catch (refreshError) {\r\n                console.error('Failed to refresh token:', refreshError);\r\n                window.location.href = '/accounts/tap/login'; // Redirect ke login jika refresh token gagal\r\n                throw refreshError;\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Fungsi untuk mengambil data Merk\r\nexport const fetchMerkData = async (pagination = { limit: 10, page: 0 }) => {\r\n    try {\r\n        const response = await axiosInstance.get('/merchant/unit/pagination', {\r\n            params: pagination,\r\n        });\r\n        return response.data.rows; // Asumsikan data ada di `rows`\r\n    } catch (error) {\r\n        console.error('Error fetching Merk data:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk mengambil data produk\r\nexport const fetchMerks = async (paginationData) => {\r\n    try {\r\n        const response = await axiosInstance.get('/merchant/unit/pagination', {\r\n            params: paginationData,\r\n        });\r\n        return response.data.data; // Data produk\r\n    } catch (error) {\r\n        console.error('Error fetching units:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk membuat produk baru\r\nexport const createMerk = async (unit) => {\r\n    try {\r\n        const response = await axiosInstance.post('/merchant/unit/create', unit);\r\n        return response.data; // Respons data\r\n    } catch (error) {\r\n        console.error('Error creating unit:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk menghapus produk berdasarkan ID\r\nexport const deleteMerk = async (id) => {\r\n    try {\r\n        await axiosInstance.delete(`/merchant/unit/${id}`);\r\n    } catch (error) {\r\n        console.error('Failed to delete unit:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk menghapus produk secara bulk\r\nexport const bulkDeleteMerks = async (selectedMerkIds) => {\r\n    try {\r\n        await axiosInstance.delete('/merchant/unit/bulk-delete', {\r\n            data: { id: selectedMerkIds },\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to delete selected units:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fungsi untuk memperbarui data produk\r\nexport const updateExistingMerk = async (unit) => {\r\n    try {\r\n        const response = await axiosInstance.put(`/merchant/unit/update/${unit.id}`, {\r\n            unit_name: unit.unit_name,\r\n            description: unit.description,\r\n            status: unit.status,\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error updating unit:', error);\r\n        throw error;\r\n    }\r\n};\r\n"
        }
    ]
}